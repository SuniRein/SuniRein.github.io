import{_ as t,c as p,b as i,a as l,e as a,d as h,w as k,r as e,o as d}from"./app-1dhAU6lT.js";const r={};function g(o,s){const n=e("VPLink");return d(),p("div",null,[s[21]||(s[21]=i("h2",{id:"我在模拟对象上调用方法时-却调用了实际对象的方法。这是为什么",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#我在模拟对象上调用方法时-却调用了实际对象的方法。这是为什么"},[i("span",null,"我在模拟对象上调用方法时，却调用了实际对象的方法。这是为什么？")])],-1)),i("p",null,[s[1]||(s[1]=a("要使方法能够被模拟，该方法必须声明为",-1)),s[2]||(s[2]=i("strong",null,"虚函数",-1)),s[3]||(s[3]=a("，除非使用",-1)),h(n,{href:"gmock_cook_book.md#mocking-non-virtual-methods"},{default:k(()=>s[0]||(s[0]=[a("高性能依赖注入技术",-1)])),_:1,__:[0]}),s[4]||(s[4]=a("。",-1))]),s[22]||(s[22]=l(`<h2 id="能否模拟可变参数函数" tabindex="-1"><a class="header-anchor" href="#能否模拟可变参数函数"><span>能否模拟可变参数函数？</span></a></h2><p>gMock 无法直接模拟可变参数函数（即使用省略号（<code>...</code>）参数的函数）。</p><p>问题在于，模拟对象通常<strong>无法</strong>知道可变参数方法接收的参数数量及其类型。 只有基类作者了解参数协议，而我们不能揣测其实现意图。</p><p>因此，要模拟此类函数，用户需要自行指导模拟对象如何解析参数数量和类型。 一种实现方式是提供函数的重载版本。</p><p>省略号参数继承自 C 语言，并非真正的 C++ 特性。 这类参数存在安全隐患，且不适用于带有构造函数或析构函数的参数。 因此我们建议在 C++ 中尽量避免使用。</p><h2 id="定义带有-const-参数的模拟方法时-msvc-报-c4301-或-c4373-警告。这是为什么" tabindex="-1"><a class="header-anchor" href="#定义带有-const-参数的模拟方法时-msvc-报-c4301-或-c4373-警告。这是为什么"><span>定义带有 <code>const</code> 参数的模拟方法时，MSVC 报 C4301 或 C4373 警告。这是为什么？</span></a></h2><p>使用 Microsoft Visual C++ 2005 SP1 编译以下代码时：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MockFoo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  MOCK_METHOD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>可能出现以下警告：</p><div class="language-ansi" data-highlighter="shiki" data-ext="ansi" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ansi"><span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">warning C4301: &#39;MockFoo::Bar&#39;: overriding virtual function only differs from &#39;Foo::Bar&#39; by const/volatile qualifier</span></span></code></pre></div><p>这是 MSVC 的 bug。 相同代码在 gcc 等编译器上可正常编译。 若使用 Visual C++ 2008 SP1 则会出现：</p><div class="language-ansi" data-highlighter="shiki" data-ext="ansi" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ansi"><span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">warning C4373: &#39;MockFoo::Bar&#39;: virtual function overrides &#39;Foo::Bar&#39;, previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers</span></span></code></pre></div><p>在 C++ 中，若声明函数参数为 <code>const</code>，该修饰符将被忽略。 因此上述 Foo 基类代码等效于：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // int 或 const int 实际上没有区别</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>实际使用中，可以在声明 <code>Bar()</code> 时使用 <code>int</code> 参数，而定义时使用 <code>const int</code> 参数，编译器仍能正确匹配。</p><p>既然在方法声明中使用 <code>const</code> 修饰参数没有实际意义，我们建议在 <code>Foo</code> 和 <code>MockFoo</code> 中移除该修饰符。 这也可以绕过 VC 的编译器问题。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>此处讨论的是顶层 <code>const</code> 修饰符。 若参数通过指针或引用传递，声明指针目标或引用对象为 <code>const</code> 仍有意义。 例如，以下两个声明<strong>不等效</strong>：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // p 和 *p 都非 const</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // p 不是 const，但 *p 是</span></span></code></pre></div></div><h2 id="如何排查-gmock-认为期望未满足的问题" tabindex="-1"><a class="header-anchor" href="#如何排查-gmock-认为期望未满足的问题"><span>如何排查 gMock 认为期望未满足的问题？</span></a></h2><p>可在运行测试时添加 <code>--gmock_verbose=info</code> 参数。 该参数会输出 gMock 接收的所有模拟函数调用信息，通过分析这些信息可定位期望未满足的原因。</p>`,19)),i("p",null,[s[6]||(s[6]=a("若出现提示信息 ",-1)),s[7]||(s[7]=i("code",null,"The mock function has no default action set, and its return type has no default value set.",-1)),s[8]||(s[8]=a("， 请尝试",-1)),h(n,{href:"gmock_cheat_sheet.md#on-call"},{default:k(()=>s[5]||(s[5]=[a("设置默认动作",-1)])),_:1,__:[5]}),s[9]||(s[9]=a("。 由于已知问题，没有默认动作的模拟函数在遇到意外调用时，不会打印实际参数与期望参数的详细对比。",-1))]),s[23]||(s[23]=l(`<h2 id="程序崩溃时-scopedmocklog-输出了大量信息。这是-gmock-的-bug-吗" tabindex="-1"><a class="header-anchor" href="#程序崩溃时-scopedmocklog-输出了大量信息。这是-gmock-的-bug-吗"><span>程序崩溃时 <code>ScopedMockLog</code> 输出了大量信息。这是 gMock 的 bug 吗？</span></a></h2><p>gMock 和 <code>ScopedMockLog</code> 在此情况下的行为是符合预期的。</p><p>当测试崩溃时，故障信号处理器会尝试记录大量信息（如堆栈跟踪和地址映射）。 若存在多个堆栈较深的线程，信息量会剧增。 当 <code>ScopedMockLog</code> 拦截到这些信息并发现其不匹配任何期望时，会打印每条信息的错误。</p><p>可以选择忽略这些错误，或者通过改进期望条件增强测试鲁棒性。 例如，添加：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">AnyNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Not</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Not</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EndsWith</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">/my_file.cc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)),</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Times</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">AnyNumber</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span></code></pre></div><h2 id="如何断言某个函数从未被调用" tabindex="-1"><a class="header-anchor" href="#如何断言某个函数从未被调用"><span>如何断言某个函数从未被调用？</span></a></h2><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Times</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><h2 id="测试失败时-gmock-对同一期望报错了两次-这是否冗余" tabindex="-1"><a class="header-anchor" href="#测试失败时-gmock-对同一期望报错了两次-这是否冗余"><span>测试失败时 gMock 对同一期望报错了两次，这是否冗余？</span></a></h2><p>当 gMock 检测到失败时，会输出相关信息（模拟函数参数、相关期望状态等）辅助调试。 若后续再次检测到失败，会重复输出相关信息，包括期望的状态。</p><p>虽然有时两次输出的期望状态描述相同，但这并非冗余，因为它们对应不同的时间节点。 相同的期望报错本身即是重要的调试信息。</p><h2 id="使用模拟对象时出现堆检查错误-但使用真实对象则正常-可能是什么原因" tabindex="-1"><a class="header-anchor" href="#使用模拟对象时出现堆检查错误-但使用真实对象则正常-可能是什么原因"><span>使用模拟对象时出现堆检查错误，但使用真实对象则正常，可能是什么原因？</span></a></h2><p>请检查被模拟的基类（应为纯接口类）是否声明了虚析构函数。</p><p>当继承基类时，必须确保其析构函数为虚函数，否则会导致严重问题。 参考以下代码：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 非虚函数，但本应为虚函数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ~Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Derived</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Base</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> private</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string value_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  Base</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Derived</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  delete</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 此处仅调用 ~Base()，未调用 ~Derived()</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">             // value_ 发生泄露</span></span></code></pre></div><p>将 <code>~Base()</code> 改为虚函数后，执行 <code>delete p</code> 会正确调用 <code>~Derived()</code>，堆检查即可通过。</p><h2 id="新期望覆盖旧期望-规则导致编写不便。为何如此设计" tabindex="-1"><a class="header-anchor" href="#新期望覆盖旧期望-规则导致编写不便。为何如此设计"><span>&quot;新期望覆盖旧期望&quot;规则导致编写不便。为何如此设计？</span></a></h2><p>开发者常抱怨如下场景：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 要求 foo.Bar() 被调用两次，首次返回 1，第二次返回 2</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 但必须逆序编写期望，非常反直觉！</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RetiresOnSaturation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RetiresOnSaturation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre></div><p>问题根源在于没有采用最佳方法表达测试意图。</p><p>默认情况下，期望的匹配顺序是<strong>任意的</strong>。 如需指定匹配顺序，必须显式声明。 这是 gMock（及 jMock）的核心设计哲学：用户易过度指定测试顺序导致测试脆弱，因此需增加实现难度。</p><p>推荐两种改进方式。 其一，使用顺序块：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-highlighted vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 这里使用顺序块，实现自然顺序编写</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  {</span></span>
<span class="line highlighted"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    InSequence s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RetiresOnSaturation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RetiresOnSaturation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span></code></pre></div><p>其二，在同一期望中声明多个动作：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-highlighted vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span></span>
<span class="line highlighted"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line highlighted"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RetiresOnSaturation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">逆向搜索机制的设计初衷</p><p>允许用户在早期设置阶段（如模拟对象构造函数或测试夹具的 <code>SetUp</code> 中）定义通用行为，后续再通过具体测试用例进行特化。 若采用正向搜索，该模式将无法实现。</p></div><h2 id="设置-on-call-但未设置-expect-call-时-gmock-会警告。是否应抑制此类警告" tabindex="-1"><a class="header-anchor" href="#设置-on-call-但未设置-expect-call-时-gmock-会警告。是否应抑制此类警告"><span>设置 <code>ON_CALL</code> 但未设置 <code>EXPECT_CALL</code> 时，gMock 会警告。是否应抑制此类警告？</span></a></h2><p>在简洁与安全之间，gMock 选择后者，因此保留警告输出是合理的设计。</p><p>在模拟对象构造函数或 <code>SetUp()</code> 中设置 <code>ON_CALL</code> 作为默认行为，而具体测试用例中通过 <code>EXPECT_CALL</code> 定义特殊预期是一种常见做法。 设置了 <code>ON_CALL</code> 并不表示预期调用，若未设置 <code>EXPECT_CALL</code> 却发生调用，可能意味着潜在错误。 静默放行此类调用易导致问题不被发现。</p><p>如果用户确信调用是合理的，可用以下方式：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillRepeatedly</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>而非：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ON_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillByDefault</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>这会告知 gMock 该调用属于预期行为，不再触发警告。</p><p>用户也可以在调试时可通过 <code>--gmock_verbose=error</code> 调节输出级别（可选值包括 <code>info</code> 或 <code>warning</code>）。 若调试时日志信息过多，只需降低输出级别。</p><h2 id="如何在动作中-delete-模拟函数参数" tabindex="-1"><a class="header-anchor" href="#如何在动作中-delete-模拟函数参数"><span>如何在动作中 <code>delete</code> 模拟函数参数？</span></a></h2><p>若需 <code>delete</code> 模拟函数中的指针参数，可使用 <code>testing::DeleteArg&lt;N&gt;()</code>：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  MOCK_METHOD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mock_foo_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">DeleteArg</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;())</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre></div><h2 id="如何对模拟函数参数执行自定义操作" tabindex="-1"><a class="header-anchor" href="#如何对模拟函数参数执行自定义操作"><span>如何对模拟函数参数执行自定义操作？</span></a></h2><p>如需执行 gMock 未直接支持的操作，可通过以下方式实现：</p>`,39)),i("ul",null,[i("li",null,[s[12]||(s[12]=a("使用 ",-1)),h(n,{href:"gmock_cook_book.md#new-mono-actions"},{default:k(()=>s[10]||(s[10]=[i("code",null,"MakeAction()",-1)])),_:1,__:[10]}),s[13]||(s[13]=a(" 或 ",-1)),h(n,{href:"gmock_cook_book.md#new-poly-actions"},{default:k(()=>s[11]||(s[11]=[i("code",null,"MakePolymorphicAction()",-1)])),_:1,__:[11]}),s[14]||(s[14]=a(" 定义自定义操作。",-1))]),i("li",null,[s[16]||(s[16]=a("编写桩函数并通过 ",-1)),h(n,{href:"gmock_cook_book.md#functions-as-actions"},{default:k(()=>s[15]||(s[15]=[i("code",null,"Invoke()",-1)])),_:1,__:[15]}),s[17]||(s[17]=a(" 调用。",-1))])]),s[24]||(s[24]=l(`<div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  MOCK_METHOD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">X</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mock_foo_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">      .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MyAction</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)));</span></span></code></pre></div><h2 id="能否模拟静态-全局函数" tabindex="-1"><a class="header-anchor" href="#能否模拟静态-全局函数"><span>能否模拟静态/全局函数？</span></a></h2><p>技术上可行，但建议重构代码。</p><p>静态函数调用通常意味着模块耦合度过高，同时也意味着更低的灵活性、可复用性、可测试性等。 推荐用小型接口进行封装，通过接口实现模拟。 这需要一些额外的初始投入，但很快就能感受到其带来的好处。</p><p>可以参考这篇 Google Testing Blog 的<a href="https://testing.googleblog.com/2008/06/defeat-static-cling.html" target="_blank" rel="noopener noreferrer">博客</a>。</p><h2 id="模拟对象需要执行复杂操作时配置繁琐——gmock-很难用" tabindex="-1"><a class="header-anchor" href="#模拟对象需要执行复杂操作时配置繁琐——gmock-很难用"><span>模拟对象需要执行复杂操作时配置繁琐——gMock 很难用！</span></a></h2><p>虽然这不是一个问题，但我们仍将给出解答。😃</p><p>使用 gMock 可以轻松创建 C++ 模拟对象。 开发者可能倾向于随处使用它们。 某些场景下它们效果良好，但有时你可能会觉得使用体验欠佳。 那么问题出在哪里？</p><p>当你编写不使用模拟的测试时，会执行代码并断言其返回正确值或系统处于预期状态。 这种测试方式被称为“基于状态的测试”。</p><p>模拟对象在“基于交互的测试”中表现卓越： 不同于最终检查系统状态的方式，模拟对象会验证其是否被正确调用，并在问题出现时立即报错，使你能精准定位错误发生的上下文环境。 相较于基于状态的测试，这种方式通常更高效、更经济。</p><p>若你正在进行基于状态的测试，且仅使用测试替身来模拟真实对象，则更适合使用伪对象（<em>fake</em>）。 此时使用模拟对象会导致不便，因为执行复杂操作并非模拟对象的强项。 如果你遇到此类问题，并因此认为模拟对象难用，说明你可能选错了工具，或者试图解决错误的问题。</p><h2 id="出现-uninteresting-function-call-encountered-default-action-taken-警告时-需要担忧吗" tabindex="-1"><a class="header-anchor" href="#出现-uninteresting-function-call-encountered-default-action-taken-警告时-需要担忧吗"><span>出现 <code>Uninteresting function call encountered - default action taken..</code> 警告时，需要担忧吗？</span></a></h2><p>完全不需要！这只是提示信息。😃</p><p>该警告表示：你定义的模拟函数未被设置任何期望 （根据 gMock 规则，这意味着你不关注此函数的调用，因此可被任意次数调用）， 但该函数确实被调用了。 这完全正常——你从未声明禁止调用此函数！</p><p>但如果你实际意图是禁止调用该函数，却忘记编写 <code>EXPECT_CALL(foo, Bar()).Times(0)</code>，该怎么办？ 虽然这可以归咎于用户的失误，但 gMock 仍会友好地输出提示信息。</p><p>因此，当你看到此消息并确信不应存在未关注的调用时，应当调查具体原因。 为便于调试，gMock 会在遇到无趣调用时输出堆栈跟踪信息。 通过该信息，可以定位具体的模拟函数及其调用方式。</p><h2 id="定义自定义动作时-应该使用-invoke-还是实现-actioninterface-接口" tabindex="-1"><a class="header-anchor" href="#定义自定义动作时-应该使用-invoke-还是实现-actioninterface-接口"><span>定义自定义动作时，应该使用 <code>Invoke()</code> 还是实现 <code>ActionInterface</code> 接口？</span></a></h2><p>两种方式均可，用户应根据具体场景选择最便捷的方式。</p><p>通常，若动作针对特定函数类型，使用 <code>Invoke()</code> 定义更简便。 若动作需适用于多种函数类型（例如 <code>Return(value)</code>），则使用 <code>MakePolymorphicAction()</code> 最合适。 当需要精确控制动作适用的函数类型时，实现 <code>ActionInterface</code> 接口是最佳选择。 具体示例可参考 <code>gmock-actions.h</code> 中 <code>Return()</code> 的实现。</p><h2 id="在-willonce-中使用-setargpointee-时-gcc-报错-conflicting-return-type-specified。这是什么意思" tabindex="-1"><a class="header-anchor" href="#在-willonce-中使用-setargpointee-时-gcc-报错-conflicting-return-type-specified。这是什么意思"><span>在 <code>WillOnce()</code> 中使用 <code>SetArgPointee()</code> 时，gcc 报错 <code>conflicting return type specified</code>。这是什么意思？</span></a></h2><p>此错误源于 gMock 无法确定模拟方法调用时应返回的值。 <code>SetArgPointee()</code> 仅设置副作用，未指定返回值。 你需要使用 <code>DoAll()</code> 来组合 <code>SetArgPointee()</code> 与提供适当返回值的 <code>Return()</code>。</p>`,21)),i("p",null,[s[19]||(s[19]=a("更多细节和示例详见",-1)),h(n,{href:"gmock_cook_book.md#mocking-side-effects"},{default:k(()=>s[18]||(s[18]=[a("这里",-1)])),_:1,__:[18]}),s[20]||(s[20]=a("。",-1))]),s[25]||(s[25]=i("h2",{id:"大型模拟类导致-microsoft-visual-c-编译时内存不足-如何解决",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#大型模拟类导致-microsoft-visual-c-编译时内存不足-如何解决"},[i("span",null,"大型模拟类导致 Microsoft Visual C++ 编译时内存不足，如何解决？")])],-1)),s[26]||(s[26]=i("p",null,[a("我们注意到当使用 "),i("code",null,"/clr"),a(" 编译选项时，Visual C++ 会消耗 5~6 倍内存来编译模拟类。 建议在编译 C++ 模拟对象时避免使用 "),i("code",null,"/clr"),a(" 选项。")],-1))])}const A=t(r,[["render",g]]),y=JSON.parse('{"path":"/gtest/gmock_faq/","title":"旧式 gMock 常见问题解答","lang":"zh-CN","frontmatter":{"title":"旧式 gMock 常见问题解答","createTime":"2025-04-21T12:42:59.000Z","permalink":"/gtest/gmock_faq/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/gmock_faq.html"},"description":"我在模拟对象上调用方法时，却调用了实际对象的方法。这是为什么？ 要使方法能够被模拟，该方法必须声明为虚函数，除非使用。 能否模拟可变参数函数？ gMock 无法直接模拟可变参数函数（即使用省略号（...）参数的函数）。 问题在于，模拟对象通常无法知道可变参数方法接收的参数数量及其类型。 只有基类作者了解参数协议，而我们不能揣测其实现意图。 因此，要模拟...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"旧式 gMock 常见问题解答\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-22T11:27:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/gmock_faq/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"旧式 gMock 常见问题解答"}],["meta",{"property":"og:description","content":"我在模拟对象上调用方法时，却调用了实际对象的方法。这是为什么？ 要使方法能够被模拟，该方法必须声明为虚函数，除非使用。 能否模拟可变参数函数？ gMock 无法直接模拟可变参数函数（即使用省略号（...）参数的函数）。 问题在于，模拟对象通常无法知道可变参数方法接收的参数数量及其类型。 只有基类作者了解参数协议，而我们不能揣测其实现意图。 因此，要模拟..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T11:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T11:27:50.000Z"}]]},"readingTime":{"minutes":10.12,"words":3036},"git":{"createdTime":1745212614000,"updatedTime":1745321270000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/gmock_faq.md","headers":[]}');export{A as comp,y as data};
