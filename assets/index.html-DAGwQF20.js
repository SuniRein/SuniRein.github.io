import{_ as k,c as p,a as n,b as a,e as i,d as t,w as h,r as l,o as d}from"./app-1dhAU6lT.js";const r={};function g(c,s){const e=l("VPLink");return d(),p("div",null,[s[125]||(s[125]=n(`<p>本文档列举了 GoogleTest 为编写测试程序提供的各项功能。 使用前需添加 <code>#include &lt;gtest/gtest.h&gt;</code> 头文件。</p><h2 id="宏" tabindex="-1"><a class="header-anchor" href="#宏"><span>宏</span></a></h2><p>GoogleTest 定义了以下宏来辅助编写测试。</p><h3 id="TEST" tabindex="-1"><a class="header-anchor" href="#TEST"><span>TEST</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... statements ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在测试套件 <em><code>TestSuiteName</code></em> 中定义一个名为 <em><code>TestName</code></em> 的测试单元，包含指定的语句集合。</p><p>参数 <em><code>TestSuiteName</code></em> 和 <em><code>TestName</code></em> 必须是有效的 C++ 标识符，且不得包含下划线（<code>_</code>）。 位于不同测试套件的测试单元可以拥有相同的名称。</p>`,7)),a("p",null,[s[1]||(s[1]=i("测试体内的语句可以是任意被测代码。 测试结果由测试体内使用的",-1)),t(e,{href:"assertions.md"},{default:h(()=>s[0]||(s[0]=[i("断言",-1)])),_:1,__:[0]}),s[2]||(s[2]=i("决定。",-1))]),s[126]||(s[126]=n(`<h3 id="TEST_F" tabindex="-1"><a class="header-anchor" href="#TEST_F"><span>TEST_F</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestFixtureName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... statements ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>定义一个使用测试夹具类 <em><code>TestFixtureName</code></em> 的测试单元 <em><code>TestName</code></em>。 相应测试套件的名称为 <em><code>TestFixtureName</code></em>。</p>`,3)),a("p",null,[s[4]||(s[4]=i("参数 ",-1)),s[5]||(s[5]=a("em",null,[a("code",null,"TestFixtureName")],-1)),s[6]||(s[6]=i(" 和 ",-1)),s[7]||(s[7]=a("em",null,[a("code",null,"TestName")],-1)),s[8]||(s[8]=i(" 必须是有效的 C++ 标识符，且不得包含下划线（",-1)),s[9]||(s[9]=a("code",null,"_",-1)),s[10]||(s[10]=i("）。 ",-1)),s[11]||(s[11]=a("em",null,[a("code",null,"TestFixtureName")],-1)),s[12]||(s[12]=i(" 必须是测试夹具类的名称（参见",-1)),t(e,{href:"../primer.md#same-data-multiple-tests"},{default:h(()=>s[3]||(s[3]=[i("测试夹具",-1)])),_:1,__:[3]}),s[13]||(s[13]=i("）。",-1))]),a("p",null,[s[15]||(s[15]=i("测试体内的语句可以是任意被测代码。 测试结果由测试体内使用的",-1)),t(e,{href:"assertions.md"},{default:h(()=>s[14]||(s[14]=[i("断言",-1)])),_:1,__:[14]}),s[16]||(s[16]=i("决定。",-1))]),s[127]||(s[127]=n(`<h3 id="TEST_P" tabindex="-1"><a class="header-anchor" href="#TEST_P"><span>TEST_P</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... statements ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>定义一个使用值参数化测试夹具类 <em><code>TestFixtureName</code></em> 的测试单元 <em><code>TestName</code></em>。 相应测试套件的名称为 <em><code>TestFixtureName</code></em>。</p>`,3)),a("p",null,[s[18]||(s[18]=i("参数 ",-1)),s[19]||(s[19]=a("em",null,[a("code",null,"TestSuiteName")],-1)),s[20]||(s[20]=i(" 和 ",-1)),s[21]||(s[21]=a("em",null,[a("code",null,"TestName")],-1)),s[22]||(s[22]=i(" 必须是有效的 C++ 标识符，且不得包含下划线（",-1)),s[23]||(s[23]=a("code",null,"_",-1)),s[24]||(s[24]=i("）。 ",-1)),s[25]||(s[25]=a("em",null,[a("code",null,"TestFixtureName")],-1)),s[26]||(s[26]=i(" 必须是值参数化测试夹具类的名称（参见",-1)),t(e,{href:"../advanced.md#value-parameterized-tests"},{default:h(()=>s[17]||(s[17]=[i("值参数化测试",-1)])),_:1,__:[17]}),s[27]||(s[27]=i("）。",-1))]),s[128]||(s[128]=n(`<p>测试体内的语句可以是任意被测代码。 在测试体内，可通过 <code>GetParam()</code> 函数来访问测试参数（参见<a href="#WithParamInterface"><code>WithParamInterface</code></a>）。 例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DoesSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_TRUE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">DoSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GetParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()));</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div>`,2)),a("p",null,[s[29]||(s[29]=i("测试结果由测试体内使用的",-1)),t(e,{href:"assertions.md"},{default:h(()=>s[28]||(s[28]=[i("断言",-1)])),_:1,__:[28]}),s[30]||(s[30]=i("决定。",-1))]),s[129]||(s[129]=n(`<p>另见 <a href="#INSTANTIATE_TEST_SUITE_P"><code>INSTANTIATE_TEST_SUITE_P</code></a>。</p><h3 id="INSTANTIATE_TEST_SUITE_P" tabindex="-1"><a class="header-anchor" href="#INSTANTIATE_TEST_SUITE_P"><span>INSTANTIATE_TEST_SUITE_P</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InstantiationName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> param_generator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InstantiationName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> param_generator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name_generator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>实例化使用 <a href="#TEST_P"><code>TEST_P</code></a> 定义的值参数化测试套件 <em><code>TestSuiteName</code></em>。</p><p>参数 <em><code>InstantiationName</code></em> 是该测试套件实例的唯一标识，用于区分不同实例。 在测试输出中，实例名称将作为前缀添加到测试套件名称 <em><code>TestSuiteName</code></em> 中。 若 <em><code>InstantiationName</code></em> 为空（<code>INSTANTIATE_TEST_SUITE_P(, ...)</code>），则不添加前缀。</p><p><span id="param-generators"></span></p><p>参数 <em><code>param_generator</code></em> 必须是下列 GoogleTest 提供的参数生成函数之一（均定义于 <code>::testing</code> 命名空间）：</p><table><thead><tr><th>参数生成器</th><th>行为</th></tr></thead><tbody><tr><td><code>Range(begin, end [, step])</code></td><td>生成值序列 <code>{begin, begin+step, begin+step+step, ...}</code>（不包括<code>end</code>）。 <code>step</code> 默认为 1。</td></tr><tr><td><code>Values(v1, v2, ..., vN)</code></td><td>生成值序列 <code>{v1, v2, ..., vN}</code>。</td></tr><tr><td><code>ValuesIn(container)</code> 或 <code>ValuesIn(begin, end)</code></td><td>基于 C 风格数组、STL 容器或迭代器范围 <code>[begin, end)</code> 生成值。</td></tr><tr><td><code>Bool()</code></td><td>生成布尔序列 <code>{false, true}</code>。</td></tr><tr><td><code>Combine(g1, g2, ..., gN)</code></td><td>基于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个生成器 <code>g_1</code>、<code>g_2</code>、...、<code>g_n</code> 生成 <code>std::tuple</code> 类型的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 元组（使用笛卡尔积）。</td></tr><tr><td><code>ConvertGenerator&lt;T&gt;(g)</code> 或 <code>ConvertGenerator(g, func)</code></td><td>生成器 <code>g</code> 产生的值通过 <code>static_cast</code> 转换为 <code>T</code> 类型。（注意：<code>T</code> 类型可能与预期不符，详见下文<a href="#using-convertgenerator">使用 ConvertGenerator</a>。）第二个可选参数 <code>func</code> 用于执行转换操作。</td></tr></tbody></table><p>可选参数 <em><code>name_generator</code></em> 是用于生成自定义测试名称后缀的函数。 该函数必须接受 <a href="#TestParamInfo"><code>TestParamInfo&lt;class ParamType&gt;</code></a> 类型参数并返回 <code>std::string</code>。 测试名称后缀只能包含字母、数字、字符和下划线。 可以使用 GoogleTest 提供的 <a href="#PrintToStringParamName"><code>PrintToStringParamName</code></a>， 或者使用自定义函数来实现更精细的控制：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    MyInstantiation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [](</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestParamInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ParamType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 可使用 info.param 来生成测试名称后缀</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string name </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    });</span></span></code></pre></div>`,10)),a("p",null,[s[32]||(s[32]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#value-parameterized-tests"},{default:h(()=>s[31]||(s[31]=[i("值参数化测试",-1)])),_:1,__:[31]}),s[33]||(s[33]=i("。",-1))]),s[130]||(s[130]=n(`<p>另见 <a href="#GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST"><code>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST</code></a>。</p><h4 id="using-convertgenerator" tabindex="-1"><a class="header-anchor" href="#using-convertgenerator"><span>使用 <code>ConvertGenerator</code></span></a></h4><p>上表列出的函数看似返回生成特定类型值的生成器，但实际上通常返回可转换为目标生成器的工厂对象。 这种间接转换机制提供了类型灵活性，允许用户指定任意可隐式转换为夹具类所需参数类型的值。</p><p>例如，对于需要 <code>int</code> 类型参数的夹具，可执行以下操作：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyInstantiation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // Values() 支持异构参数类型</span></span></code></pre></div><p>这里 <code>1.2</code>（<code>double</code> 类型）看似会隐式转换为 <code>int</code>，但实际上需要通过前文所述的间接转换机制实现。</p><p>若参数类型无法隐式转换但支持显式转换，可使用 <code>ConvertGenerator&lt;T&gt;</code> 强制转换。 编译器会自动推导目标类型（夹具参数类型），但由于间接转换机制，用户需显式指定中间类型 <code>T</code>：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 夹具参数类型</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 显式转换构造函数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  explicit</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">tuple</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyInstantiation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ConvertGenerator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">tuple</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&gt;(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Combine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0.1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())));</span></span></code></pre></div><p>此例中 <code>Combine</code> 生成 <code>std::tuple&lt;int, bool&gt;</code> 对象（尽管第一个元素为 <code>double</code> 类型）， 并通过 <code>ConvertGenerator</code> 将这些元组转换为 <code>MyParam</code> 对象。</p><p>对于无法由生成类型转换成的参数类型，可以提供执行转换的可调用对象。 该可调用对象接受生成类型的参数，返回夹具参数类型的对象。 生成类型通常可通过可调用对象的签名推导得出，因此不需要显式指定：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 夹具参数类型</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  MyParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyInstantiation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ConvertGenerator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Combine</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1.2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Bool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        [](</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">tuple</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">          const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> auto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> t</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">          return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }));</span></span></code></pre></div><p>可调用对象可以是任何可初始化为 <code>std::function</code> 的对象。 由于返回值会被 <code>static_cast</code> 转换为夹具参数类型，因此无需与之完全匹配。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>考虑以下示例：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyInstantiation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    ConvertGenerator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">s</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)),</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [](</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string_view</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}));</span></span></code></pre></div><p><code>string</code> 参数被复制到 <code>Values</code> 返回的工厂对象中。 由于 lambda 推导的生成类型为 <code>string_view</code>，工厂对象生成的生成器将持有指向该 <code>string</code> 的 <code>string_view</code>。 当生成器执行时，工厂对象已被销毁，<code>string_view</code> 成为悬空引用。</p><p>可通过显式指定生成类型来解决这个问题： <code>ConvertGenerator&lt;std::string&gt;(Values(std::string(&quot;s&quot;)), [](std::string_view s) { ... })</code>。 或者修改 lambda 签名，使其接受 <code>std::string</code> 或 <code>const std::string&amp;</code> 类型 （后者不会产生悬空引用，因为类型推导时会去除引用和 <code>const</code> 限定）。</p></div><h3 id="TYPED_TEST_SUITE" tabindex="-1"><a class="header-anchor" href="#TYPED_TEST_SUITE"><span>TYPED_TEST_SUITE</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_SUITE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestFixtureName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_SUITE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestFixtureName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> NameGenerator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>基于测试夹具 <em><code>TestFixtureName</code></em> 定义类型化测试套件。 测试套件名称为 <em><code>TestFixtureName</code></em>。</p><p>参数 <em><code>TestFixtureName</code></em> 是一个类型参数化的夹具类模板，例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typename</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> List</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">list</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T shared_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  T value_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>参数 <em><code>Types</code></em> 是一个表示测试类型列表的 <a href="#Types"><code>Types</code></a> 对象，例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyTypes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> unsigned</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_SUITE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTypes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>这里必须使用类型别名（<code>using</code> 或 <code>typedef</code>）以保证 <code>TYPED_TEST_SUITE</code> 宏正确解析。</p><p>可选参数 <em><code>NameGenerator</code></em> 允许指定一个包含静态模板函数 <code>GetName(int)</code> 的类，例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> NameGenerator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typename</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> GetName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> constexpr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">is_same_v</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">char</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> constexpr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">is_same_v</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">int</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> constexpr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">is_same_v</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> unsigned</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">unsignedInt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_SUITE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTypes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> NameGenerator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div>`,23)),a("p",null,[s[35]||(s[35]=i("更多信息请参考 ",-1)),s[36]||(s[36]=a("a",{href:"#TYPED_TEST"},[a("code",null,"TYPED_TEST")],-1)),s[37]||(s[37]=i(" 和",-1)),t(e,{href:"../advanced.md#typed-tests"},{default:h(()=>s[34]||(s[34]=[i("类型化测试",-1)])),_:1,__:[34]}),s[38]||(s[38]=i("。",-1))]),s[131]||(s[131]=n(`<h3 id="TYPED_TEST" tabindex="-1"><a class="header-anchor" href="#TYPED_TEST"><span>TYPED_TEST</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... statements ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在类型化测试套件 <em><code>TestSuiteName</code></em> 中定义名为 <em><code>TestName</code></em> 的测试单元。 测试套件必须通过 <a href="#TYPED_TEST_SUITE"><code>TYPED_TEST_SUITE</code></a> 定义。</p><p>在测试体内，可以使用 <code>TypeParam</code> 访问类型参数，使用 <code>TestFixture</code> 访问夹具类。 示例：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Example</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 通过 TypeParam 访问类型参数</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 由于实际上是位于派生类模板中，必须通过 this 指针来访问夹具成员</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  TypeParam n </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">-&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">value_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 访问静态成员添加 &#39;TestFixture::&#39; 前缀</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  n </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">shared_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 访问类型别名需添加 &#39;typename TestFixture::&#39; 前缀</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  typename</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">List</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  values</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">push_back</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div>`,5)),a("p",null,[s[40]||(s[40]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#typed-tests"},{default:h(()=>s[39]||(s[39]=[i("类型化测试",-1)])),_:1,__:[39]}),s[41]||(s[41]=i("。",-1))]),s[132]||(s[132]=n('<h3 id="TYPED_TEST_SUITE_P" tabindex="-1"><a class="header-anchor" href="#TYPED_TEST_SUITE_P"><span>TYPED_TEST_SUITE_P</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestFixtureName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>基于测试夹具 <em><code>TestFixtureName</code></em> 定义类型参数化测试套件。 测试套件名称为 <em><code>TestFixtureName</code></em>。</p><p>参数 <em><code>TestFixtureName</code></em> 是类型参数化的夹具类模板。 示例参见 <a href="#TYPED_TEST_SUITE"><code>TYPED_TEST_SUITE</code></a>。</p>',4)),a("p",null,[s[43]||(s[43]=i("更多信息请参考 ",-1)),s[44]||(s[44]=a("a",{href:"#TYPED_TEST_P"},[a("code",null,"TYPED_TEST_P")],-1)),s[45]||(s[45]=i(" 和",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[42]||(s[42]=[i("类型参数化测试",-1)])),_:1,__:[42]}),s[46]||(s[46]=i("。",-1))]),s[133]||(s[133]=n(`<h3 id="TYPED_TEST_P" tabindex="-1"><a class="header-anchor" href="#TYPED_TEST_P"><span>TYPED_TEST_P</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... statements ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在类型参数化测试套件 <em><code>TestSuiteName</code></em> 中定义名为 <em><code>TestName</code></em> 的测试单元。 测试套件必须通过 <a href="#TYPED_TEST_SUITE_P"><code>TYPED_TEST_SUITE_P</code></a> 定义。</p><p>在测试体内，可以使用 <code>TypeParam</code> 指代类型参数，<code>TestFixture</code> 指代夹具类。 示例参见 <a href="#TYPED_TEST"><code>TYPED_TEST</code></a>。</p>`,4)),a("p",null,[s[48]||(s[48]=i("更多信息请参考 ",-1)),s[49]||(s[49]=a("a",{href:"#REGISTER_TYPED_TEST_SUITE_P"},[a("code",null,"REGISTER_TYPED_TEST_SUITE_P")],-1)),s[50]||(s[50]=i(" 和",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[47]||(s[47]=[i("类型参数化测试",-1)])),_:1,__:[47]}),s[51]||(s[51]=i("。",-1))]),s[134]||(s[134]=n(`<h3 id="REGISTER_TYPED_TEST_SUITE_P" tabindex="-1"><a class="header-anchor" href="#REGISTER_TYPED_TEST_SUITE_P"><span>REGISTER_TYPED_TEST_SUITE_P</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">REGISTER_TYPED_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestNames...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>注册拥有测试单元 <em><code>TestNames...</code></em> 的类型参数化测试套件 <em><code>TestSuiteName</code></em>。 测试套件和测试单元必须通过 <a href="#TYPED_TEST_SUITE_P"><code>TYPED_TEST_SUITE_P</code></a> 和 <a href="#TYPED_TEST_P"><code>TYPED_TEST_P</code></a> 定义。</p><p>示例：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义测试套件和测试单元</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HasPropertyA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TYPED_TEST_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HasPropertyB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 注册测试单元</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">REGISTER_TYPED_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HasPropertyA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HasPropertyB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div>`,5)),a("p",null,[s[53]||(s[53]=i("更多信息请参考 ",-1)),s[54]||(s[54]=a("a",{href:"#INSTANTIATE_TYPED_TEST_SUITE_P"},[a("code",null,"INSTANTIATE_TYPED_TEST_SUITE_P")],-1)),s[55]||(s[55]=i(" 和",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[52]||(s[52]=[i("类型参数化测试",-1)])),_:1,__:[52]}),s[56]||(s[56]=i("。",-1))]),s[135]||(s[135]=n(`<h3 id="INSTANTIATE_TYPED_TEST_SUITE_P" tabindex="-1"><a class="header-anchor" href="#INSTANTIATE_TYPED_TEST_SUITE_P"><span>INSTANTIATE_TYPED_TEST_SUITE_P</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TYPED_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InstantiationName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>实例化类型参数化测试套件 <em><code>TestSuiteName</code></em>。 测试套件必须通过 <a href="#REGISTER_TYPED_TEST_SUITE_P"><code>REGISTER_TYPED_TEST_SUITE_P</code></a> 注册。</p><p>参数 <em><code>InstantiationName</code></em> 是该测试套件实例的唯一标识，用于区分不同实例。 在测试输出中，实例名称将作为前缀添加到测试套件名称 <em><code>TestSuiteName</code></em> 中。 若 <em><code>InstantiationName</code></em> 为空（<code>INSTANTIATE_TEST_SUITE_P(, ...)</code>），则不添加前缀。</p><p>参数 <em><code>Types</code></em> 是一个表示测试类型列表的 <a href="#Types"><code>Types</code></a> 对象，例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyTypes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Types</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> unsigned</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">INSTANTIATE_TYPED_TEST_SUITE_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyInstantiation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyFixture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MyTypes</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>这里必须使用类型别名（<code>using</code> 或 <code>typedef</code>）以保证 <code>INSTANTIATE_TYPED_TEST_SUITE_P</code> 宏正确解析。</p>`,7)),a("p",null,[s[58]||(s[58]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[57]||(s[57]=[i("类型参数化测试",-1)])),_:1,__:[57]}),s[59]||(s[59]=i("。",-1))]),s[136]||(s[136]=n(`<h3 id="FRIEND_TEST" tabindex="-1"><a class="header-anchor" href="#FRIEND_TEST"><span>FRIEND_TEST</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">FRIEND_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在类定义体内声明特定测试单元为友元，使其能够访问类的私有成员。</p><p>若类定义在命名空间内，测试夹具和测试也必须定义在完全相同的命名空间（不得使用内联或匿名命名空间），才能成为该类的友元。</p><p>例如，若类定义如下：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> my_namespace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyClass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  friend</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyClassTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  FRIEND_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyClassTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> HasPropertyA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  FRIEND_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">MyClassTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> HasPropertyB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... 类成员定义 ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace my_namespace</span></span></code></pre></div><p>则对应测试代码应为：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> my_namespace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyClassTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyClassTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HasPropertyA</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyClassTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HasPropertyB</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace my_namespace</span></span></code></pre></div>`,8)),a("p",null,[s[61]||(s[61]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#testing-private-code"},{default:h(()=>s[60]||(s[60]=[i("测试私有代码",-1)])),_:1,__:[60]}),s[62]||(s[62]=i("。",-1))]),s[137]||(s[137]=n('<h3 id="SCOPED_TRACE" tabindex="-1"><a class="header-anchor" href="#SCOPED_TRACE"><span>SCOPED_TRACE</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SCOPED_TRACE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在当前作用域内，为所有断言失败信息添加包含当前文件名、行号和指定 <em><code>message</code></em> 信息的标记。</p>',3)),a("p",null,[s[64]||(s[64]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#adding-traces-to-assertions"},{default:h(()=>s[63]||(s[63]=[i("为断言添加追踪信息",-1)])),_:1,__:[63]}),s[65]||(s[65]=i("。",-1))]),s[138]||(s[138]=n('<p>另见 <a href="#ScopedTrace"><code>ScopedTrace</code></a>。</p><h3 id="GTEST_SKIP" tabindex="-1"><a class="header-anchor" href="#GTEST_SKIP"><span>GTEST_SKIP</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GTEST_SKIP</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>在运行时中止当前测试执行流。</p><p>使用场景：</p><ol><li>测试单元函数体内。</li><li>测试环境（派生自 <a href="#Environment"><code>Environment</code></a> 类）的 <code>SetUp()</code> 方法。</li><li>测试夹具（派生自 <a href="#Test"><code>Test</code></a> 类）的 <code>SetUp</code> 方法。</li></ol><p>如果在全局环境 <code>SetUp()</code> 中使用，会跳过测试程序的所有测试。 如果在测试夹具 <code>SetUp()</code> 中使用，会跳过相应测试套件的所有测试。</p><p>与断言类似，<code>GTEST_SKIP</code> 宏支持流式附加自定义信息。</p>',8)),a("p",null,[s[67]||(s[67]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#skipping-test-execution"},{default:h(()=>s[66]||(s[66]=[i("跳过测试的执行",-1)])),_:1,__:[66]}),s[68]||(s[68]=i("。",-1))]),s[139]||(s[139]=n('<h3 id="GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST" tabindex="-1"><a class="header-anchor" href="#GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST"><span>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>豁免值参数化测试套件 <em><code>TestSuiteName</code></em> 的实例化检查。</p><p>默认情况下，没有对应 <a href="#INSTANTIATE_TEST_SUITE_P"><code>INSTANTIATE_TEST_SUITE_P</code></a> 的 <a href="#TEST_P"><code>TEST_P</code></a> 语句会触发 <code>GoogleTestVerification</code> 套件的失败。 可以使用 <code>GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST</code> 来为特定测试套件抑制此失败。</p><h2 id="类与类型" tabindex="-1"><a class="header-anchor" href="#类与类型"><span>类与类型</span></a></h2><p>GoogleTest 定义了以下类与类型来辅助编写测试。</p><h3 id="AssertionResult" tabindex="-1"><a class="header-anchor" href="#AssertionResult"><span>AssertionResult</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">AssertionResult</span></span></code></pre></div><p>用于表示断言是否成功的类。</p><p>当断言失败时，<code>AssertionResult</code> 对象会存储非空的失败信息，可通过对象的 <code>message()</code> 方法获取。</p><p>要创建该类的实例，请使用工厂函数 <a href="#AssertionSuccess">AssertionSuccess()</a> 或 <a href="#AssertionFailure">AssertionFailure()</a>。</p><h3 id="AssertionException" tabindex="-1"><a class="header-anchor" href="#AssertionException"><span>AssertionException</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">AssertionException</span></span></code></pre></div><p>可从 <a href="#TestEventListener::OnTestPartResult">TestEventListener::OnTestPartResult</a> 中抛出的异常。</p><h3 id="EmptyTestEventListener" tabindex="-1"><a class="header-anchor" href="#EmptyTestEventListener"><span>EmptyTestEventListener</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">EmptyTestEventListener</span></span></code></pre></div><p>为 <a href="#TestEventListener"><code>TestEventListener</code></a> 接口所有方法提供空实现，使得子类只需重写其关注的方法。</p><h3 id="Environment" tabindex="-1"><a class="header-anchor" href="#Environment"><span>Environment</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Environment</span></span></code></pre></div>',19)),a("p",null,[s[70]||(s[70]=i("表示全局测试环境。参见",-1)),t(e,{href:"../advanced.md#global-set-up-and-tear-down"},{default:h(()=>s[69]||(s[69]=[i("全局 SetUp/TearDown",-1)])),_:1,__:[69]}),s[71]||(s[71]=i("。",-1))]),s[140]||(s[140]=n(`<h4 id="Environment-protected" tabindex="-1"><a class="header-anchor" href="#Environment-protected"><span>受保护方法</span></a></h4><h5 id="Environment::SetUp" tabindex="-1"><a class="header-anchor" href="#Environment::SetUp"><span>SetUp</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Environment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SetUp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>重写此方法以定义环境设置方式。</p><h5 id="Environment::TearDown" tabindex="-1"><a class="header-anchor" href="#Environment::TearDown"><span>TearDown</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Environment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TearDown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>重写此方法以定义环境清理方式。</p><h3 id="ScopedTrace" tabindex="-1"><a class="header-anchor" href="#ScopedTrace"><span>ScopedTrace</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ScopedTrace</span></span></code></pre></div><p>该类的实例会在其生命周期范围内，为所有测试失败信息添加追踪信息。 实例销毁时效果消失。</p><p><code>ScopedTrace</code> 的构造函数形式如下：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typename</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ScopedTrace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> line</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>使用示例：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ScopedTrace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> trace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">file.cc</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 123</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>生成的追踪信息包含源文件路径、行号和给定消息。 <code>message</code> 参数可以是任何可流式传输到 <code>std::ostream</code> 的对象。</p><p>另见 <a href="#SCOPED_TRACE"><code>SCOPED_TRACE</code></a>。</p><h3 id="Test" tabindex="-1"><a class="header-anchor" href="#Test"><span>Test</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Test</span></span></code></pre></div><p>所有测试继承的抽象基类。 不可复制。</p><h4 id="Test-public" tabindex="-1"><a class="header-anchor" href="#Test-public"><span>公有方法</span></a></h4><h5 id="Test::SetUpTestSuite" tabindex="-1"><a class="header-anchor" href="#Test::SetUpTestSuite"><span>SetUpTestSuite</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SetUpTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>执行测试套件的设置逻辑。 <code>GoogleTest</code> 会在运行测试套件首个测试前调用 <code>SetUpTestSuite()</code>。</p><h5 id="Test::TearDownTestSuite" tabindex="-1"><a class="header-anchor" href="#Test::TearDownTestSuite"><span>TearDownTestSuite</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TearDownTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>执行测试套件的清理逻辑。 GoogleTest 会在运行测试套件最后一个测试后调用 <code>TearDownTestSuite()</code>。</p><h5 id="Test::HasFatalFailure" tabindex="-1"><a class="header-anchor" href="#Test::HasFatalFailure"><span>HasFatalFailure</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasFatalFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>当且仅当当前测试存在致命失败时返回 <code>true</code>。</p><h5 id="Test::HasNonfatalFailure" tabindex="-1"><a class="header-anchor" href="#Test::HasNonfatalFailure"><span>HasNonfatalFailure</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasNonfatalFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>当且仅当当前测试存在非致命失败时返回 <code>true</code>。</p><h5 id="Test::HasFailure" tabindex="-1"><a class="header-anchor" href="#Test::HasFailure"><span>HasFailure</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>当且仅当当前测试存在失败（无论致命或非致命）时返回 <code>true</code>。</p><h5 id="Test::IsSkipped" tabindex="-1"><a class="header-anchor" href="#Test::IsSkipped"><span>IsSkipped</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">IsSkipped</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>当且仅当当前测试被跳过时返回 <code>true</code>。</p><h5 id="Test::RecordProperty" tabindex="-1"><a class="header-anchor" href="#Test::RecordProperty"><span>RecordProperty</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RecordProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RecordProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>为当前测试、测试套件或整个测试程序记录属性。 对于相同的 <code>key</code>，仅保留最后记录的值。</p><p><code>key</code> 必须是有效的 XML 属性名，且不能与 GoogleTest 已用属性冲突 （<code>name</code>、<code>file</code>、<code>line</code>、<code>status</code>、<code>time</code>、<code>classname</code>、<code>type_param</code> 与 <code>value_param</code>）。</p><p><code>RecordProperty</code> 被设为 <code>public static</code> 以便非测试夹具成员的工具函数调用。</p><p>在测试生命周期内（从构造函数开始到析构函数结束）的 <code>RecordProperty</code> 调用将作为 <code>&lt;testcase&gt;</code> 元素的属性输出到 XML。 在夹具的 <code>SetUpTestSuite</code> 或 <code>TearDownTestSuite</code> 方法记录的属性将作为对应 <code>&lt;testsuite&gt;</code> 元素的属性。 在全局上下文中的调用（<code>RUN_ALL_TESTS</code> 执行前后或注册 <code>Environment</code> 对象的 <code>SetUp</code>/<code>TearDown</code> 方法中）将作为 <code>&lt;testsuites&gt;</code> 元素的属性。</p><h4 id="Test-protected" tabindex="-1"><a class="header-anchor" href="#Test-protected"><span>受保护方法</span></a></h4><h5 id="Test::SetUp" tabindex="-1"><a class="header-anchor" href="#Test::SetUp"><span>SetUp</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SetUp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>重写此方法以执行测试夹具的设置逻辑。 GoogleTest 会在每个测试单元运行前调用 <code>SetUp()</code>。</p><h5 id="Test::TearDown" tabindex="-1"><a class="header-anchor" href="#Test::TearDown"><span>TearDown</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TearDown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>重写此方法以执行测试夹具的清理逻辑。 GoogleTest 会在每个测试单元运行后调用 <code>TearDown()</code>。</p><h3 id="TestWithParam" tabindex="-1"><a class="header-anchor" href="#TestWithParam"><span>TestWithParam</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestWithParam</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre></div><p>继承自 <a href="#Test"><code>Test</code></a> 和 <a href="#WithParamInterface"><code>WithParamInterface&lt;T&gt;</code></a> 的便捷类。</p><h3 id="TestSuite" tabindex="-1"><a class="header-anchor" href="#TestSuite"><span>TestSuite</span></a></h3><p>表示测试套件。 不可复制。</p><h4 id="TestSuite-public" tabindex="-1"><a class="header-anchor" href="#TestSuite-public"><span>公有方法</span></a></h4><h5 id="TestSuite::name" tabindex="-1"><a class="header-anchor" href="#TestSuite::name"><span>name</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试套件名称。</p><h5 id="TestSuite::type_param" tabindex="-1"><a class="header-anchor" href="#TestSuite::type_param"><span>type_param</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">type_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div>`,62)),a("p",null,[s[74]||(s[74]=i("返回参数类型名称，若非类型化或类型参数化测试套件则返回 ",-1)),s[75]||(s[75]=a("code",null,"NULL",-1)),s[76]||(s[76]=i("。 参见",-1)),t(e,{href:"../advanced.md#typed-tests"},{default:h(()=>s[72]||(s[72]=[i("类型化测试",-1)])),_:1,__:[72]}),s[77]||(s[77]=i("和",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[73]||(s[73]=[i("类型参数化测试",-1)])),_:1,__:[73]}),s[78]||(s[78]=i("。",-1))]),s[141]||(s[141]=n('<h5 id="TestSuite::should_run" tabindex="-1"><a class="header-anchor" href="#TestSuite::should_run"><span>should_run</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">should_run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当测试套件中存在需要运行的测试时返回 <code>true</code>。</p><h5 id="TestSuite::successful_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::successful_test_count"><span>successful_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">successful_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取本测试套件的成功测试数。</p><h5 id="TestSuite::skipped_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::skipped_test_count"><span>skipped_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">skipped_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取本测试套件的跳过测试数。</p><h5 id="TestSuite::failed_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::failed_test_count"><span>failed_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">failed_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取本测试套件的失败测试数。</p><h5 id="TestSuite::reportable_disabled_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::reportable_disabled_test_count"><span>reportable_disabled_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">reportable_disabled_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取需在 XML 中报告的禁用测试数。</p><h5 id="TestSuite::disabled_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::disabled_test_count"><span>disabled_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">disabled_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取本测试套件中禁用测试数。</p><h5 id="TestSuite::reportable_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::reportable_test_count"><span>reportable_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">reportable_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取需在 XML 中报告中的测试数。</p><h5 id="TestSuite::test_to_run_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::test_to_run_count"><span>test_to_run_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test_to_run_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取本测试套件应运行的测试数。</p><h5 id="TestSuite::total_test_count" tabindex="-1"><a class="header-anchor" href="#TestSuite::total_test_count"><span>total_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取本测试套件的所有测试总数。</p><h5 id="TestSuite::Passed" tabindex="-1"><a class="header-anchor" href="#TestSuite::Passed"><span>Passed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Passed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试套件通过时返回 <code>true</code>。</p><h5 id="TestSuite::Failed" tabindex="-1"><a class="header-anchor" href="#TestSuite::Failed"><span>Failed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试套件失败时返回 <code>true</code>。</p><h5 id="TestSuite::elapsed_time" tabindex="-1"><a class="header-anchor" href="#TestSuite::elapsed_time"><span>elapsed_time</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeInMillis</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">elapsed_time</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回以毫秒为单位的耗时。</p><h5 id="TestSuite::start_timestamp" tabindex="-1"><a class="header-anchor" href="#TestSuite::start_timestamp"><span>start_timestamp</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeInMillis</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_timestamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试套件开始时间戳（自 UNIX 纪元起算的毫秒数）。</p><h5 id="TestSuite::GetTestInfo" tabindex="-1"><a class="header-anchor" href="#TestSuite::GetTestInfo"><span>GetTestInfo</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestInfo</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GetTestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回全部测试中第 <code>i</code> 个测试的 <a href="#TestInfo"><code>TestInfo</code></a>。 <code>i</code> 的范围应为 0 至 <code>total_test_count() - 1</code>，无效时返回 <code>NULL</code>。</p><h5 id="TestSuite::ad_hoc_test_result" tabindex="-1"><a class="header-anchor" href="#TestSuite::ad_hoc_test_result"><span>ad_hoc_test_result</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ad_hoc_test_result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回记录 <code>SetUpTestSuite</code> 和 <code>TearDownTestSuite</code> 执行期间测试属性的 <a href="#TestResult"><code>TestResult</code></a>。</p><h3 id="TestInfo" tabindex="-1"><a class="header-anchor" href="#TestInfo"><span>TestInfo</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestInfo</span></span></code></pre></div><p>存储测试单元的相关信息。</p><h4 id="TestInfo-public" tabindex="-1"><a class="header-anchor" href="#TestInfo-public"><span>公有方法</span></a></h4><h5 id="TestInfo::test_suite_name" tabindex="-1"><a class="header-anchor" href="#TestInfo::test_suite_name"><span>test_suite_name</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test_suite_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回测试套件名称。</p><h5 id="TestInfo::name" tabindex="-1"><a class="header-anchor" href="#TestInfo::name"><span>name</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回测试单元名称。</p><h5 id="TestInfo::type_param" tabindex="-1"><a class="header-anchor" href="#TestInfo::type_param"><span>type_param</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">type_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div>',57)),a("p",null,[s[81]||(s[81]=i("返回参数类型名称，若非类型化或类型参数化测试套件则返回 ",-1)),s[82]||(s[82]=a("code",null,"NULL",-1)),s[83]||(s[83]=i("。 参见",-1)),t(e,{href:"../advanced.md#typed-tests"},{default:h(()=>s[79]||(s[79]=[i("类型化测试",-1)])),_:1,__:[79]}),s[84]||(s[84]=i("和",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[80]||(s[80]=[i("类型参数化测试",-1)])),_:1,__:[80]}),s[85]||(s[85]=i("。",-1))]),s[142]||(s[142]=n('<h5 id="TestInfo::value_param" tabindex="-1"><a class="header-anchor" href="#TestInfo::value_param"><span>value_param</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">value_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div>',2)),a("p",null,[s[87]||(s[87]=i("返回值参数的文本表示，若非值参数化测试则返回 ",-1)),s[88]||(s[88]=a("code",null,"NULL",-1)),s[89]||(s[89]=i("。 参见",-1)),t(e,{href:"../advanced.md#value-parameterized-tests"},{default:h(()=>s[86]||(s[86]=[i("值参数化测试",-1)])),_:1,__:[86]}),s[90]||(s[90]=i("。",-1))]),s[143]||(s[143]=n('<h5 id="TestInfo::file" tabindex="-1"><a class="header-anchor" href="#TestInfo::file"><span>file</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回测试定义所在文件名。</p><h5 id="TestInfo::line" tabindex="-1"><a class="header-anchor" href="#TestInfo::line"><span>line</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">line</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回测试定义所在行号。</p><h5 id="TestInfo::is_in_another_shard" tabindex="-1"><a class="header-anchor" href="#TestInfo::is_in_another_shard"><span>is_in_another_shard</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">is_in_another_shard</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当测试位于其他分片，应跳过时返回 <code>true</code>。</p><h5 id="TestInfo::should_run" tabindex="-1"><a class="header-anchor" href="#TestInfo::should_run"><span>should_run</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">should_run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当测试应运行时返回 <code>true</code>，即测试未被禁用（或虽禁用但指定了 <code>also_run_disabled_tests</code> 标志）且全名与用户过滤条件匹配。</p>',12)),a("p",null,[s[92]||(s[92]=i("GoogleTest 允许用户通过全名过滤测试，仅运行匹配过滤条件的测试。 详见",-1)),t(e,{href:"../advanced.md#running-a-subset-of-the-tests"},{default:h(()=>s[91]||(s[91]=[i("运行测试的子集",-1)])),_:1,__:[91]}),s[93]||(s[93]=i("。",-1))]),s[144]||(s[144]=n(`<h5 id="TestInfo::is_reportable" tabindex="-1"><a class="header-anchor" href="#TestInfo::is_reportable"><span>is_reportable</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">is_reportable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当本测试将出现在 XML 报告中时返回 <code>true</code>。</p><h5 id="TestInfo::result" tabindex="-1"><a class="header-anchor" href="#TestInfo::result"><span>result</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回测试结果。参见 <a href="#TestResult"><code>TestResult</code></a>。</p><h3 id="TestParamInfo" tabindex="-1"><a class="header-anchor" href="#TestParamInfo"><span>TestParamInfo</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestParamInfo</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre></div><p>描述值参数化测试的参数。 模板参数 <code>T</code> 表示参数类型。</p><p>包含 <code>param</code> 和 <code>index</code> 字段，分别存储参数值及其整数索引。</p><h3 id="UnitTest" tabindex="-1"><a class="header-anchor" href="#UnitTest"><span>UnitTest</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">UnitTest</span></span></code></pre></div><p>存储测试程序的相关信息。</p><p><code>UnitTest</code> 是单例类。 首次调用 <code>UnitTest::GetInstance()</code> 时会创建唯一实例且永不销毁。</p><p><code>UnitTest</code> 不可复制。</p><h4 id="UnitTest-public" tabindex="-1"><a class="header-anchor" href="#UnitTest-public"><span>公有方法</span></a></h4><h5 id="UnitTest::GetInstance" tabindex="-1"><a class="header-anchor" href="#UnitTest::GetInstance"><span>GetInstance</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GetInstance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>获取 <code>UnitTest</code> 单例对象。 首次调用时构造对象，后续调用返回同一实例。</p><h5 id="UnitTest::original_working_dir" tabindex="-1"><a class="header-anchor" href="#UnitTest::original_working_dir"><span>original_working_dir</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">original_working_dir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回首个 <a href="#TEST"><code>TEST()</code></a> 或 <a href="#TEST_F"><code>TEST_F()</code></a> 执行时的工作目录。 <code>UnitTest</code> 对象持有字符串的所有权。</p><h5 id="UnitTest::current_test_suite" tabindex="-1"><a class="header-anchor" href="#UnitTest::current_test_suite"><span>current_test_suite</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestSuite</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">current_test_suite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回当前运行测试的 <a href="#TestSuite"><code>TestSuite</code></a> 对象，无测试运行时返回 <code>NULL</code>。</p><h5 id="UnitTest::current_test_info" tabindex="-1"><a class="header-anchor" href="#UnitTest::current_test_info"><span>current_test_info</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestInfo</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">current_test_info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回当前运行测试的 <a href="#TestInfo"><code>TestInfo</code></a> 对象，无测试运行时返回 <code>NULL</code>。</p><h5 id="UnitTest::random_seed" tabindex="-1"><a class="header-anchor" href="#UnitTest::random_seed"><span>random_seed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">random_seed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回当前测试运行使用的随机种子。</p><h5 id="UnitTest::successful_test_suite_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::successful_test_suite_count"><span>successful_test_suite_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">successful_test_suite_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取成功测试套件数。</p><h5 id="UnitTest::failed_test_suite_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::failed_test_suite_count"><span>failed_test_suite_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">failed_test_suite_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取失败测试套件数。</p><h5 id="UnitTest::total_test_suite_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::total_test_suite_count"><span>total_test_suite_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total_test_suite_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试套件总数。</p><h5 id="UnitTest::test_suite_to_run_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::test_suite_to_run_count"><span>test_suite_to_run_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test_suite_to_run_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取包含至少一个应运行测试的测试套件总数。</p><h5 id="UnitTest::successful_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::successful_test_count"><span>successful_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">successful_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取成功测试数。</p><h5 id="UnitTest::skipped_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::skipped_test_count"><span>skipped_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">skipped_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取跳过测试数。</p><h5 id="UnitTest::failed_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::failed_test_count"><span>failed_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">failed_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取失败测试数。</p><h5 id="UnitTest::reportable_disabled_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::reportable_disabled_test_count"><span>reportable_disabled_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">reportable_disabled_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取需在 XML 报告中打印的禁用测试数。</p><h5 id="UnitTest::disabled_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::disabled_test_count"><span>disabled_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">disabled_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取禁用测试数。</p><h5 id="UnitTest::reportable_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::reportable_test_count"><span>reportable_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">reportable_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取需在 XML 报告中打印的测试数。</p><h5 id="UnitTest::total_test_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::total_test_count"><span>total_test_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total_test_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试总数。</p><h5 id="UnitTest::test_to_run_count" tabindex="-1"><a class="header-anchor" href="#UnitTest::test_to_run_count"><span>test_to_run_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test_to_run_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取应运行的测试数。</p><h5 id="UnitTest::start_timestamp" tabindex="-1"><a class="header-anchor" href="#UnitTest::start_timestamp"><span>start_timestamp</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeInMillis</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_timestamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试程序开始时间戳（自 UNIX 纪元起算的毫秒数）。</p><h5 id="UnitTest::elapsed_time" tabindex="-1"><a class="header-anchor" href="#UnitTest::elapsed_time"><span>elapsed_time</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeInMillis</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">elapsed_time</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取以毫秒为单位的耗时。</p><h5 id="UnitTest::Passed" tabindex="-1"><a class="header-anchor" href="#UnitTest::Passed"><span>Passed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Passed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当单元测试通过（所有测试套件通过）时返回 <code>true</code>。</p><h5 id="UnitTest::Failed" tabindex="-1"><a class="header-anchor" href="#UnitTest::Failed"><span>Failed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当单元测试失败（有测试套件失败或测试外逻辑失败）时返回 <code>true</code>。</p><h5 id="UnitTest::GetTestSuite" tabindex="-1"><a class="header-anchor" href="#UnitTest::GetTestSuite"><span>GetTestSuite</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestSuite</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GetTestSuite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回全部测试套件中第 <code>i</code> 个 <a href="#TestSuite"><code>TestSuite</code></a>。 <code>i</code> 的范围应为 0 至 <code>total_test_suite_count() - 1</code>，无效时返回 <code>NULL</code>。</p><h5 id="UnitTest::ad_hoc_test_result" tabindex="-1"><a class="header-anchor" href="#UnitTest::ad_hoc_test_result"><span>ad_hoc_test_result</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ad_hoc_test_result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回包含在测试套件之外记录的失败信息和测试属性的 <a href="#TestResult"><code>TestResult</code></a>。</p><h5 id="UnitTest::listeners" tabindex="-1"><a class="header-anchor" href="#UnitTest::listeners"><span>listeners</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestEventListeners</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> UnitTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">listeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>返回用于追踪 GoogleTest 内部事件的事件监听器列表。 参见 <a href="#TestEventListeners"><code>TestEventListeners</code></a>。</p><h3 id="TestEventListener" tabindex="-1"><a class="header-anchor" href="#TestEventListener"><span>TestEventListener</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestEventListener</span></span></code></pre></div><p>用于跟踪测试执行的接口。 下面列出的方法按事件触发顺序排列。</p><h4 id="TestEventListener-public" tabindex="-1"><a class="header-anchor" href="#TestEventListener-public"><span>公有方法</span></a></h4><h5 id="TestEventListener::OnTestProgramStart" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestProgramStart"><span>OnTestProgramStart</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestProgramStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在所有测试活动开始前触发。</p><h5 id="TestEventListener::OnTestIterationStart" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestIterationStart"><span>OnTestIterationStart</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestIterationStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> iteration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在每次测试迭代开始前触发。 若设置了 <code>GTEST_FLAG(repeat)</code> ，将会有多次迭代。 <code>iteration</code> 表示从 0 开始的迭代索引。</p><h5 id="TestEventListener::OnEnvironmentsSetUpStart" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnEnvironmentsSetUpStart"><span>OnEnvironmentsSetUpStart</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnEnvironmentsSetUpStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在每次迭代的环境设置开始前触发。</p><h5 id="TestEventListener::OnEnvironmentsSetUpEnd" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnEnvironmentsSetUpEnd"><span>OnEnvironmentsSetUpEnd</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnEnvironmentsSetUpEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在每次迭代的环境设置结束后触发。</p><h5 id="TestEventListener::OnTestSuiteStart" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestSuiteStart"><span>OnTestSuiteStart</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestSuiteStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestSuite</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_suite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在测试套件开始前触发。</p><h5 id="TestEventListener::OnTestStart" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestStart"><span>OnTestStart</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestInfo</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在测试单元开始前触发。</p><h5 id="TestEventListener::OnTestPartResult" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestPartResult"><span>OnTestPartResult</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestPartResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_part_result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在断言失败或调用 <code>SUCCEED()</code> 后触发。 可以在这里抛出 <a href="#AssertionException"><code>AssertionException</code></a> 或其派生异常以跳过当前测试。</p><h5 id="TestEventListener::OnTestEnd" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestEnd"><span>OnTestEnd</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestInfo</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在测试单元结束后触发。</p><h5 id="TestEventListener::OnTestSuiteEnd" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestSuiteEnd"><span>OnTestSuiteEnd</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestSuiteEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestSuite</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_suite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在测试套件结束后触发。</p><h5 id="TestEventListener::OnEnvironmentsTearDownStart" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnEnvironmentsTearDownStart"><span>OnEnvironmentsTearDownStart</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnEnvironmentsTearDownStart</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在每次迭代的环境清理开始前触发。</p><h5 id="TestEventListener::OnEnvironmentsTearDownEnd" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnEnvironmentsTearDownEnd"><span>OnEnvironmentsTearDownEnd</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnEnvironmentsTearDownEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在每次迭代的环境清理结束后触发。</p><h5 id="TestEventListener::OnTestIterationEnd" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestIterationEnd"><span>OnTestIterationEnd</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestIterationEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> iteration</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在每次测试迭代结束后触发。</p><h5 id="TestEventListener::OnTestProgramEnd" tabindex="-1"><a class="header-anchor" href="#TestEventListener::OnTestProgramEnd"><span>OnTestProgramEnd</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">virtual</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">OnTestProgramEnd</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> UnitTest</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> unit_test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>在所有测试活动结束后触发。</p><h3 id="TestEventListeners" tabindex="-1"><a class="header-anchor" href="#TestEventListeners"><span>TestEventListeners</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestEventListeners</span></span></code></pre></div><p>允许用户添加监听器来追踪 GoogleTest 事件。</p><h4 id="TestEventListeners-public" tabindex="-1"><a class="header-anchor" href="#TestEventListeners-public"><span>公有方法</span></a></h4><h5 id="TestEventListeners::Append" tabindex="-1"><a class="header-anchor" href="#TestEventListeners::Append"><span>Append</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Append</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestEventListener</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>将事件监听器追加到列表末尾。 GoogleTest 将获得该监听器的所有权，并在测试程序结束时自动删除。</p><h5 id="TestEventListeners::Release" tabindex="-1"><a class="header-anchor" href="#TestEventListeners::Release"><span>Release</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestEventListener</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Release</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestEventListener</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> listener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>从列表中移除指定监听器并返回该监听器。 调用方需负责删除该监听器。 未找到时返回 <code>NULL</code>。</p><h5 id="TestEventListeners::default_result_printer" tabindex="-1"><a class="header-anchor" href="#TestEventListeners::default_result_printer"><span>default_result_printer</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestEventListener</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">default_result_printer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回负责默认控制台输出的标准监听器。 可将其从监听器列表移除以关闭默认控制台输出。 注意，通过 <code>Release()</code> 移除后所有权将转移给调用方，再次调用本方法返回 <code>NULL</code>。</p><h5 id="TestEventListeners::default_xml_generator" tabindex="-1"><a class="header-anchor" href="#TestEventListeners::default_xml_generator"><span>default_xml_generator</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestEventListener</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestEventListeners</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">default_xml_generator</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回由 <code>--gtest_output=xml</code> 标志控制的、负责生成默认 XML 输出的标准监听器。 可通过移除该监听器关闭默认 XML 输出并替换为自定义实现。 注意，通过 <code>Release()</code> 移除后所有权转移将转移给调用方，再次调用本方法返回 <code>NULL</code>。</p><h3 id="TestPartResult" tabindex="-1"><a class="header-anchor" href="#TestPartResult"><span>TestPartResult</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestPartResult</span></span></code></pre></div><p>表示测试段（<em>test part</em>）（如断言、<code>FAIL()</code>、<code>ADD_FAILURE()</code>、<code>SUCCESS()</code>）结果的可复制对象。</p><h4 id="TestPartResult-public" tabindex="-1"><a class="header-anchor" href="#TestPartResult-public"><span>公有方法</span></a></h4><h5 id="TestPartResult::type" tabindex="-1"><a class="header-anchor" href="#TestPartResult::type"><span>type</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Type</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试段结果。</p><p>返回的 <code>Type</code> 枚举定义如下：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">enum</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  kSuccess</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          // 成功</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  kNonFatalFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 失败但可继续测试</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  kFatalFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 失败且需终止测试</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  kSkip</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">              // 已跳过</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><h5 id="TestPartResult::file_name" tabindex="-1"><a class="header-anchor" href="#TestPartResult::file_name"><span>file_name</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">file_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试段所在源文件名，未知时返回 <code>NULL</code>。</p><h5 id="TestPartResult::line_number" tabindex="-1"><a class="header-anchor" href="#TestPartResult::line_number"><span>line_number</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">line_number</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试段所在源文件行号，未知时返回 <code>-1</code>。</p><h5 id="TestPartResult::summary" tabindex="-1"><a class="header-anchor" href="#TestPartResult::summary"><span>summary</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">summary</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取失败信息概要。</p><h5 id="TestPartResult::message" tabindex="-1"><a class="header-anchor" href="#TestPartResult::message"><span>message</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试段关联的信息。</p><h5 id="TestPartResult::skipped" tabindex="-1"><a class="header-anchor" href="#TestPartResult::skipped"><span>skipped</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">skipped</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试段被跳过时返回 <code>true</code>。</p><h5 id="TestPartResult::passed" tabindex="-1"><a class="header-anchor" href="#TestPartResult::passed"><span>passed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">passed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试段通过时返回 <code>true</code>。</p><h5 id="TestPartResult::nonfatally_failed" tabindex="-1"><a class="header-anchor" href="#TestPartResult::nonfatally_failed"><span>nonfatally_failed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">nonfatally_failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试段发生非致命失败时返回 <code>true</code>。</p><h5 id="TestPartResult::fatally_failed" tabindex="-1"><a class="header-anchor" href="#TestPartResult::fatally_failed"><span>fatally_failed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fatally_failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试段发生致命失败时返回 <code>true</code>。</p><h5 id="TestPartResult::failed" tabindex="-1"><a class="header-anchor" href="#TestPartResult::failed"><span>failed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试段失败时返回 <code>true</code>。</p><h3 id="TestProperty" tabindex="-1"><a class="header-anchor" href="#TestProperty"><span>TestProperty</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestProperty</span></span></code></pre></div><p>表示用户自定义测试属性的可复制对象，可输出为键值对字符串。</p><h4 id="TestProperty-public" tabindex="-1"><a class="header-anchor" href="#TestProperty-public"><span>公有方法</span></a></h4><h5 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>key</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> key</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取用户定义的键名。</p><h5 id="value" tabindex="-1"><a class="header-anchor" href="#value"><span>value</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取用户定义的值。</p><h5 id="SetValue" tabindex="-1"><a class="header-anchor" href="#SetValue"><span>SetValue</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SetValue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> new_value</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>设置新值，覆盖原有值。</p><h3 id="TestResult" tabindex="-1"><a class="header-anchor" href="#TestResult"><span>TestResult</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestResult</span></span></code></pre></div><p>包含测试单元的结果信息。不可复制。</p><h4 id="TestResult-public" tabindex="-1"><a class="header-anchor" href="#TestResult-public"><span>公有方法</span></a></h4><h5 id="TestResult::total_part_count" tabindex="-1"><a class="header-anchor" href="#TestResult::total_part_count"><span>total_part_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">total_part_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试段总数（包括成功段与失败段）。</p><h5 id="TestResult::test_property_count" tabindex="-1"><a class="header-anchor" href="#TestResult::test_property_count"><span>test_property_count</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">test_property_count</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试属性总数。</p><h5 id="TestResult::Passed" tabindex="-1"><a class="header-anchor" href="#TestResult::Passed"><span>Passed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Passed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试通过（无失败段）时返回 <code>true</code>。</p><h5 id="TestResult::Skipped" tabindex="-1"><a class="header-anchor" href="#TestResult::Skipped"><span>Skipped</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Skipped</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试被跳过时返回 <code>true</code>。</p><h5 id="TestResult::Failed" tabindex="-1"><a class="header-anchor" href="#TestResult::Failed"><span>Failed</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Failed</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试存在失败时返回 <code>true</code>。</p><h5 id="TestResult::HasFatalFailure" tabindex="-1"><a class="header-anchor" href="#TestResult::HasFatalFailure"><span>HasFatalFailure</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasFatalFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试存在致命失败时返回 <code>true</code>。</p><h5 id="TestResult::HasNonfatalFailure" tabindex="-1"><a class="header-anchor" href="#TestResult::HasNonfatalFailure"><span>HasNonfatalFailure</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">HasNonfatalFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>当且仅当测试存在非致命失败时返回 <code>true</code>。</p><h5 id="TestResult::elapsed_time" tabindex="-1"><a class="header-anchor" href="#TestResult::elapsed_time"><span>elapsed_time</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeInMillis</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">elapsed_time</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取以毫秒为单位的耗时。</p><h5 id="TestResult::start_timestamp" tabindex="-1"><a class="header-anchor" href="#TestResult::start_timestamp"><span>start_timestamp</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TimeInMillis</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start_timestamp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>获取测试单元开始时间戳（自 UNIX 纪元起算的毫秒数）。</p><h5 id="TestResult::GetTestPartResult" tabindex="-1"><a class="header-anchor" href="#TestResult::GetTestPartResult"><span>GetTestPartResult</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestPartResult</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GetTestPartResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回所有测试段结果中第 <code>i</code> 个 <a href="#TestPartResult"><code>TestPartResult</code></a>。 <code>i</code> 范围应为 0 至 <code>total_part_count() - 1</code>，无效时终止程序。</p><h5 id="TestResult::GetTestProperty" tabindex="-1"><a class="header-anchor" href="#TestResult::GetTestProperty"><span>GetTestProperty</span></a></h5><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestProperty</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestResult</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">GetTestProperty</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span></span></code></pre></div><p>返回所有测试属性中第 <code>i</code> 个 <a href="#TestProperty"><code>TestProperty</code></a>。 <code>i</code> 范围应为 0 至 <code>test_property_count() - 1</code>，无效时终止程序。</p><h3 id="TimeInMillis" tabindex="-1"><a class="header-anchor" href="#TimeInMillis"><span>TimeInMillis</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TimeInMillis</span></span></code></pre></div><p>表示毫秒级时间的整数类型。</p><h3 id="Types" tabindex="-1"><a class="header-anchor" href="#Types"><span>Types</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Types</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T...</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre></div><p>表示类型化测试和类型参数化测试使用的类型列表。</p><p>模板参数 <code>T...</code> 可接受任意数量的类型，例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Types</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;char</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> unsigned</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int&gt;</span></span></code></pre></div>`,241)),a("p",null,[s[96]||(s[96]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#typed-tests"},{default:h(()=>s[94]||(s[94]=[i("类型化测试",-1)])),_:1,__:[94]}),s[97]||(s[97]=i("和",-1)),t(e,{href:"../advanced.md#type-parameterized-tests"},{default:h(()=>s[95]||(s[95]=[i("类型参数化测试",-1)])),_:1,__:[95]}),s[98]||(s[98]=i("。",-1))]),s[145]||(s[145]=n('<h3 id="WithParamInterface" tabindex="-1"><a class="header-anchor" href="#WithParamInterface"><span>WithParamInterface</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">WithParamInterface</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre></div><p>所有值参数化测试继承的纯接口类。</p><p>值参数化测试夹具类必须同时继承 <a href="#Test"><code>Test</code></a> 和 <code>WithParamInterface</code>。 这通常可以通过继承 <a href="#TestWithParam"><code>TestWithParam</code></a> 来实现，但复杂测试层次结构可能需要在不同层级分别继承两者。</p><p>该接口为参数类型 <code>T</code> 定义了别名 <code>ParamType</code>，并支持通过 <code>GetParam()</code> 方法访问测试参数值：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ParamType</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> GetParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div>',6)),a("p",null,[s[100]||(s[100]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#value-parameterized-tests"},{default:h(()=>s[99]||(s[99]=[i("值参数化测试",-1)])),_:1,__:[99]}),s[101]||(s[101]=i("。",-1))]),s[146]||(s[146]=n(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>GoogleTest 定义了以下函数来辅助编写和运行测试。</p><h3 id="InitGoogleTest" tabindex="-1"><a class="header-anchor" href="#InitGoogleTest"><span>InitGoogleTest</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">InitGoogleTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char**</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">InitGoogleTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> wchar_t**</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">InitGoogleTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>初始化 GoogleTest。 必须在调用 <a href="#RUN_ALL_TESTS"><code>RUN_ALL_TESTS()</code></a> 前执行。 该函数的主要功能是解析命令行参数中的 GoogleTest 标志，在识别到标志后会将其从 <code>argv</code> 中移除并递减 <code>*argc</code>。 注意，<code>argv</code> 必须以 <code>NULL</code> 指针结尾（即 <code>argv[argc]</code> 为 <code>NULL</code>），默认传给 <code>main</code> 的 <code>argv</code> 已满足此条件。</p><p>该函数无返回值，而是通过更新 GoogleTest 标志变量实现功能。</p><p><code>InitGoogleTest(int* argc, wchar_t** argv)</code> 重载适用于 Windows 的 <code>UNICODE</code> 模式。</p><p>无参数版本适用于 Arduino/嵌入式平台等无 <code>argc</code>/<code>argv</code> 的环境。</p><h3 id="AddGlobalTestEnvironment" tabindex="-1"><a class="header-anchor" href="#AddGlobalTestEnvironment"><span>AddGlobalTestEnvironment</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Environment</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">AddGlobalTestEnvironment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Environment</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div>`,10)),a("p",null,[s[103]||(s[103]=i("为测试程序添加全局测试环境。 必须在调用 ",-1)),s[104]||(s[104]=a("a",{href:"#RUN_ALL_TESTS"},[a("code",null,"RUN_ALL_TESTS()")],-1)),s[105]||(s[105]=i(" 前执行。 更多信息请参考",-1)),t(e,{href:"../advanced.md#global-set-up-and-tear-down"},{default:h(()=>s[102]||(s[102]=[i("全局 SetUp/TearDown",-1)])),_:1,__:[102]}),s[106]||(s[106]=i("。",-1))]),s[147]||(s[147]=n(`<p>另见 <a href="#Environment"><code>Environment</code></a>。</p><h3 id="RegisterTest" tabindex="-1"><a class="header-anchor" href="#RegisterTest"><span>RegisterTest</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typename</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Factory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestInfo</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RegisterTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_suite_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test_name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                                const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> value_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">                                const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char*</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> file</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> line</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Factory</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> factory</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>向框架动态注册测试。</p><p><code>factory</code> 参数是创建 <code>Test</code> 对象实例的可调用工厂对象（支持移动构造）或函数指针。 其所有权将转移给调用方。 可调用对象的签名为 <code>Fixture*()</code>，其中 <code>Fixture</code> 是测试夹具类。 同一 <code>test_suite_name</code> 注册的所有测试必须使用相同夹具类型，这会在运行时进行校验。</p><p>框架会根据工厂推断夹具类，并调用其 <code>SetUpTestSuite</code> 和 <code>TearDownTestSuite</code> 方法。</p><p>必须在调用 <a href="#RUN_ALL_TESTS"><code>RUN_ALL_TESTS()</code></a> 前执行，否则行为未定义。</p>`,7)),a("p",null,[s[108]||(s[108]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#registering-tests-programmatically"},{default:h(()=>s[107]||(s[107]=[i("用编程方式手动注册测试",-1)])),_:1,__:[107]}),s[109]||(s[109]=i("。",-1))]),s[148]||(s[148]=n('<h3 id="RUN_ALL_TESTS" tabindex="-1"><a class="header-anchor" href="#RUN_ALL_TESTS"><span>RUN_ALL_TESTS</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RUN_ALL_TESTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>在 <code>main()</code> 函数中使用以运行所有测试。 若全部成功则返回 <code>0</code>，否则返回 <code>1</code>。</p><p>应在使用 <a href="#InitGoogleTest"><code>InitGoogleTest()</code></a> 解析命令行参数后调用。</p><p>此函数原先为宏，因此其位于全局命名空间，且为全大写命名。</p><h3 id="AssertionSuccess" tabindex="-1"><a class="header-anchor" href="#AssertionSuccess"><span>AssertionSuccess</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">AssertionResult</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">AssertionSuccess</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>创建成功的断言结果。 参见 <a href="#AssertionResult"><code>AssertionResult</code></a>。</p><h3 id="AssertionFailure" tabindex="-1"><a class="header-anchor" href="#AssertionFailure"><span>AssertionFailure</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">AssertionResult</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">AssertionFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span></code></pre></div><p>创建失败的断言结果。 使用 <code>&lt;&lt;</code> 运算符存储失败信息：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">AssertionFailure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">My failure message</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre></div><p>参见 <a href="#AssertionResult"><code>AssertionResult</code></a>。</p><h3 id="StaticAssertTypeEq" tabindex="-1"><a class="header-anchor" href="#StaticAssertTypeEq"><span>StaticAssertTypeEq</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">StaticAssertTypeEq</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;()</span></span></code></pre></div><p>在编译时验证类型相等的断言。 当且仅当 <code>T1</code> 和 <code>T2</code> 为相同类型时编译通过。 其返回值无意义。</p>',16)),a("p",null,[s[111]||(s[111]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#type-assertions"},{default:h(()=>s[110]||(s[110]=[i("类型断言",-1)])),_:1,__:[110]}),s[112]||(s[112]=i("。",-1))]),s[149]||(s[149]=n('<h3 id="PrintToString" tabindex="-1"><a class="header-anchor" href="#PrintToString"><span>PrintToString</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PrintToString</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>获取 GoogleTest 值打印器打印 <code>x</code> 的输出值。</p>',3)),a("p",null,[s[114]||(s[114]=i("更多信息请参考",-1)),t(e,{href:"../advanced.md#teaching-googletest-how-to-print-your-values"},{default:h(()=>s[113]||(s[113]=[i("告诉 GoogleTest 如何打印参数值",-1)])),_:1,__:[113]}),s[115]||(s[115]=i("。",-1))]),s[150]||(s[150]=n('<h3 id="PrintToStringParamName" tabindex="-1"><a class="header-anchor" href="#PrintToStringParamName"><span>PrintToStringParamName</span></a></h3><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PrintToStringParamName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">TestParamInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div>',2)),a("p",null,[s[117]||(s[117]=i("内置的参数化测试名称生成器，返回对 ",-1)),s[118]||(s[118]=a("code",null,"info.param",-1)),s[119]||(s[119]=i(" 调用 ",-1)),s[120]||(s[120]=a("a",{href:"#PrintToString"},[a("code",null,"PrintToString")],-1)),s[121]||(s[121]=i(" 的结果。 当测试参数为 ",-1)),s[122]||(s[122]=a("code",null,"std::string",-1)),s[123]||(s[123]=i(" 或 C 字符串时不可用。 更多信息请参考",-1)),t(e,{href:"../advanced.md#specifying-names-for-value-parameterized-test-parameters"},{default:h(()=>s[116]||(s[116]=[i("指定值参数化测试参数名称",-1)])),_:1,__:[116]}),s[124]||(s[124]=i("。",-1))]),s[151]||(s[151]=a("p",null,[i("另见 "),a("a",{href:"#TestParamInfo"},[a("code",null,"TestParamInfo")]),i(" 和 "),a("a",{href:"#INSTANTIATE_TEST_SUITE_P"},[a("code",null,"INSTANTIATE_TEST_SUITE_P")]),i("。")],-1))])}const y=k(r,[["render",g]]),A=JSON.parse('{"path":"/gtest/reference/testing/","title":"测试参考","lang":"zh-CN","frontmatter":{"title":"测试参考","createTime":"2025-04-04T21:44:07.000Z","permalink":"/gtest/reference/testing/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/reference/testing.html"},"description":"本文档列举了 GoogleTest 为编写测试程序提供的各项功能。 使用前需添加 #include <gtest/gtest.h> 头文件。 宏 GoogleTest 定义了以下宏来辅助编写测试。 TEST 在测试套件 TestSuiteName 中定义一个名为 TestName 的测试单元，包含指定的语句集合。 参数 TestSuiteName 和 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试参考\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-10T08:59:20.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/reference/testing/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"测试参考"}],["meta",{"property":"og:description","content":"本文档列举了 GoogleTest 为编写测试程序提供的各项功能。 使用前需添加 #include <gtest/gtest.h> 头文件。 宏 GoogleTest 定义了以下宏来辅助编写测试。 TEST 在测试套件 TestSuiteName 中定义一个名为 TestName 的测试单元，包含指定的语句集合。 参数 TestSuiteName 和 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-10T08:59:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-10T08:59:20.000Z"}]]},"readingTime":{"minutes":25.34,"words":7601},"git":{"createdTime":1743775019000,"updatedTime":1754816360000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":5,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/reference/testing.md","headers":[]}');export{y as comp,A as data};
