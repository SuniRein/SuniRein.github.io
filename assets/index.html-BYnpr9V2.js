import{_ as s,c as n,a as t,o as e}from"./app-1dhAU6lT.js";const p="/assets/B%E6%A0%91-4%E9%98%B6B%E6%A0%91-DaOTZjGc.svg",i={};function o(l,a){return e(),n("div",null,a[0]||(a[0]=[t('<p>在本文中，我将深入解析 B 树这一广泛应用于数据库与文件系统的多路平衡搜索树。 与传统的二叉树不同，B 树通过多分支和高扇出的特性，显著减少磁盘 I/O 次数，从而高效管理海量数据。 本文将系统讲解 B 树的核心设计思想、平衡维护机制及其关键操作（查找、插入、删除）， 探讨 B 树的适用场景，帮助读者理解其在大规模存储系统中的核心地位。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>有些文章中会把 B 树写作 B-树，这来源与 B 树的英文 B-tree。 我个人认为这种写法不是很好，容易被误解为是“B 减树”，但其实这里的 &#39;-&#39; 只是表示连接的意义，并不是作为减号。</p></div><h2 id="什么是-b-树" tabindex="-1"><a class="header-anchor" href="#什么是-b-树"><span>什么是 B 树？</span></a></h2><p>B 树是一种多路平衡搜索树，广泛应用于数据库系统和文件系统中，特别是在需要频繁进行磁盘读写操作的场景中。 不同于常见的二叉平衡树，B 树中的一个节点能存放多个数据，且具有多个子节点。</p><div style="text-align:center;"><p><img src="'+p+'" alt="一棵 5 阶 B 树示例"></p></div><h2 id="b-树的核心特性" tabindex="-1"><a class="header-anchor" href="#b-树的核心特性"><span>B 树的核心特性</span></a></h2><h3 id="节点结构" tabindex="-1"><a class="header-anchor" href="#节点结构"><span>节点结构</span></a></h3><p>在 B 树中，节点可以分为<mark>内部节点</mark>和<mark>叶子节点</mark>。 内部节点存储数据和指向子节点的指针，而叶子节点只存储数据，不存储指针。</p><p>通常来说，一个存有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个数据的内部节点有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个子节点，反之亦然。</p><p>B 树节点内部的数据在维持自身有序性的同时，与子节点也存在一定的有序性。 <strong>对于一个升序节点中的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个关键字，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个子节点中的关键字全部小于它，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个子节点中的关键字全部大于它。</strong> 因此，我们可以将这 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个子节点看作恰好散落插入在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个节点数据中。</p><h3 id="阶数" tabindex="-1"><a class="header-anchor" href="#阶数"><span>阶数</span></a></h3><p>B 树中节点允许的最大度值称为 B 树的<mark>阶数</mark>（Order），它是 B 树的一个重要特性。<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>一棵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 阶的 B 树具有以下性质：</p><ol><li>每个节点最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个关键字和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 个子节点。</li><li>除根节点外，每一个非叶子节点最少有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mi>m</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\\lfloor \\frac{m}{2} \\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span> 个子节点。</li><li>如果根节点不是叶子节点，那么它至少有两个子节点。</li><li>所有的叶子节点位于同一层。</li></ol><h3 id="节点分裂与节点合并" tabindex="-1"><a class="header-anchor" href="#节点分裂与节点合并"><span>节点分裂与节点合并</span></a></h3><p>B 树通过<mark>节点分裂</mark>和<mark>节点合并</mark>来维护其平衡性，这两种操作是 B 树区分于传统二叉树的特有机制。</p><h4 id="节点分裂" tabindex="-1"><a class="header-anchor" href="#节点分裂"><span>节点分裂</span></a></h4><p>在执行插入操作时，若某个节点的关键字数量超过上限，则需要分裂。</p><div class="vp-steps"><ol><li><p>定位中间关键字。</p></li><li><p>创建两个左右子节点。</p><p>左节点保留中间关键字之前的关键字和对应的子节点，右节点保留中间关键字之后的关键字和对应的子节点。</p></li><li><p>提升中间关键字。</p><p>将中间关键字插入到父节点中，若不存在父节点则创建一个。 同时，删除父节点中原有节点的指针，建立父节点到左右节点的连接。</p></li><li><p>递归检查父节点。</p><p>由于中间关键字的插入，父节点可能发生溢出，需继续分裂直至满足条件。</p></li></ol></div><h4 id="节点合并" tabindex="-1"><a class="header-anchor" href="#节点合并"><span>节点合并</span></a></h4><p>在执行删除操作时，若某个节点的关键字低于下限，则需要合并。</p><div class="vp-steps"><ol><li><p>判断兄弟节点可否借取。</p><p>若<strong>邻近</strong>的兄弟节点有富余的关键字，可以向它们借取一个，同时调整对应的关系。 否则，需要合并。</p></li><li><p>合并兄弟节点。</p><p>选取一个相邻的兄弟节点，以及父节点中对应的关键字，合并为一个新的节点，然后重新调整父节点与新节点的关系。</p></li><li><p>递归检查父节点。</p><p>合并完后父节点可能因关键字下移而不足，需继续合并直至满足约束。</p><p>若父节点为根节点且合并后为空，删除父节点，选择合并后的新节点为新根。此时树高减少。</p></li></ol></div><h2 id="b-树的基本操作" tabindex="-1"><a class="header-anchor" href="#b-树的基本操作"><span>B 树的基本操作</span></a></h2><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找"><span>查找</span></a></h3><p>B 树的查找过程类似于二叉搜索树，我们从根节点开始，自顶向下逐步搜索，直至找到目标关键字。 不同之处在于由于每个节点拥有多个关键字，我们需要遍历这些关键字来确定要查找节点所在的位置。</p><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h3><div class="vp-steps"><ol><li><p>检验存在性。</p><p>插入一个元素时，首先要验证该元素在 B 树中是否存在。</p></li><li><p>寻找要插入的叶子节点。</p><p><strong>插入操作一定发生在叶子节点</strong>。 我们自顶向下搜索，找到能用来插入该节点的叶子节点。</p></li><li><p>插入关键字。</p><p>在叶子节点中找到合适的位置，插入该关键字。 此时如果溢出，则进行<a href="#%E8%8A%82%E7%82%B9%E5%88%86%E8%A3%82">节点分裂</a>。<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p></li></ol></div><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><p>相比插入操作，删除操作实现起来较为复杂。</p><div class="vp-steps"><ol><li><p>定位要被删除的关键字。</p></li><li><p>借位策略。</p><p>当被删除的关键字位于非叶子节点时，用前驱或后驱替换之<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>，目标节点改为前驱或后继所在节点。 <strong>前驱与后继必然位于叶子节点上。</strong></p></li><li><p>删除关键字。</p><p>此时目标节点必然为叶子节点，删除时只需重新调整关键字的顺序。 若删除后关键字的数量不足，则进行<a href="#%E8%8A%82%E7%82%B9%E5%90%88%E5%B9%B6">节点合并</a>。</p></li></ol></div><h2 id="为什么需要-b-树" tabindex="-1"><a class="header-anchor" href="#为什么需要-b-树"><span>为什么需要 B 树</span></a></h2><h3 id="磁盘-i-o-的瓶颈与二叉树的局限性" tabindex="-1"><a class="header-anchor" href="#磁盘-i-o-的瓶颈与二叉树的局限性"><span>磁盘 I/O 的瓶颈与二叉树的局限性</span></a></h3><p>传统二叉树在处理大规模数据存储上具有天然劣势。</p><p>大数据一般存储在磁盘上，相比键值比较所用的时间，从磁盘上读取数据的时间占支配地位。 磁盘上的数据检索以页作为基本单位，当分页大小为 4KB 时，读取 1B 数据和读取 4KB 数据都需要进行一次磁盘 I/O，耗时几乎相同。 而像 AVL 树、红黑树这种二叉树结构，每个节点可能分布在不同的磁盘页上，一次访问需要进行多次磁盘 I/O。</p><p>B 树的每个节点可以存储大量关键字，连续分布在相同的磁盘页上，仅需进行一次 I/O，读取效率高。 而且它能有效较少树高，降低一次查询中磁盘 I/O 的次数，大大提高查询性能。</p><h3 id="自平衡机制的稳定性" tabindex="-1"><a class="header-anchor" href="#自平衡机制的稳定性"><span>自平衡机制的稳定性</span></a></h3><p>AVL 树、红黑树通过旋转操作维护平衡，但旋转可能涉及多个节点调整（例如子树的高度变化）。 B 树通过节点分裂和节点合并实现平衡，操作仅影响局部节点，减少全局调整的开销。</p><p>此外，B 树的平衡还是自适应的，不需要像 AVL 树、红黑树那样维护额外的节点信息。</p><h3 id="局部性原理的充分利用" tabindex="-1"><a class="header-anchor" href="#局部性原理的充分利用"><span>局部性原理的充分利用</span></a></h3><p>现代 CPU 普遍采用缓存机制，访问连续内存的时间要比随机访问快得多。 B 树高扇出与局部性优化的特性，充分利用了局部性原理，在现代 CPU 多级缓存架构下同样展现出显著优势。 在很多场合下，B 树表现出优于传统 BST 的性能。</p><p>新兴语言 Rust 标准库的 <code>BTreeMap</code> 采用 B 树来实现，正是基于这个原理。<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><h2 id="b-树的应用" tabindex="-1"><a class="header-anchor" href="#b-树的应用"><span>B 树的应用</span></a></h2><h3 id="数据库索引" tabindex="-1"><a class="header-anchor" href="#数据库索引"><span>数据库索引</span></a></h3><p>主流数据库（如 MySQL、PostgreSQL）普遍使用 <mark>B+ 树</mark>（B 树的变种）作为索引结构。</p><h3 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统"><span>文件系统</span></a></h3><p>文件系统（如 NTFS、ReiserFS）用 B 树管理目录和文件块指针。</p><h3 id="内存受限的嵌入式系统" tabindex="-1"><a class="header-anchor" href="#内存受限的嵌入式系统"><span>内存受限的嵌入式系统</span></a></h3><p>B 树的高扇出特性在内存中能减少指针数量，降低内存碎片。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://zh.wikipedia.org/wiki/B%E6%A0%91/" target="_blank" rel="noopener noreferrer">B 树 | 维基百科</a></li><li><a href="https://oi-wiki.org/ds/b-tree/" target="_blank" rel="noopener noreferrer">B 树 | OI Wiki</a></li><li><a href="https://zhuanlan.zhihu.com/p/463641767" target="_blank" rel="noopener noreferrer">B 树详解与实现 | 知乎专栏</a></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>在有些文献中，B 树的阶数被定义为最大关键字个数，与本文所采用的定义略有不同。 还有些文献采用节点的最小度数来定义 B 树的阶数。 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>有时为了实现的方便，会选择先分裂后插入。 <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>因为位于非叶子节点上，所以前驱或后继必然存在。 <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>见 <a href="https://rustwiki.org/zh-CN/std/collections/struct.BTreeMap.html" target="_blank" rel="noopener noreferrer">https://rustwiki.org/zh-CN/std/collections/struct.BTreeMap.html</a>。 <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li></ol></section>',52)]))}const m=s(i,[["render",o]]),c=JSON.parse('{"path":"/article/313wmwqo/","title":"B 树","lang":"zh-CN","frontmatter":{"title":"B 树","createTime":"2025/02/14 22:39:14","permalink":"/article/313wmwqo/","tags":["数据结构","平衡树"],"description":"在本文中，我将深入解析 B 树这一广泛应用于数据库与文件系统的多路平衡搜索树。 与传统的二叉树不同，B 树通过多分支和高扇出的特性，显著减少磁盘 I/O 次数，从而高效管理海量数据。 本文将系统讲解 B 树的核心设计思想、平衡维护机制及其关键操作（查找、插入、删除）， 探讨 B 树的适用场景，帮助读者理解其在大规模存储系统中的核心地位。 注 有些文章中...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"B 树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T10:18:19.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/article/313wmwqo/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"B 树"}],["meta",{"property":"og:description","content":"在本文中，我将深入解析 B 树这一广泛应用于数据库与文件系统的多路平衡搜索树。 与传统的二叉树不同，B 树通过多分支和高扇出的特性，显著减少磁盘 I/O 次数，从而高效管理海量数据。 本文将系统讲解 B 树的核心设计思想、平衡维护机制及其关键操作（查找、插入、删除）， 探讨 B 树的适用场景，帮助读者理解其在大规模存储系统中的核心地位。 注 有些文章中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T10:18:19.000Z"}],["meta",{"property":"article:tag","content":"平衡树"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:modified_time","content":"2025-02-24T10:18:19.000Z"}]]},"readingTime":{"minutes":7.41,"words":2223},"git":{"createdTime":1739536937000,"updatedTime":1740392299000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"数据结构与算法精讲/B树.md","headers":[],"categoryList":[{"id":"e010e2","sort":10004,"name":"数据结构与算法精讲"}]}');export{m as comp,c as data};
