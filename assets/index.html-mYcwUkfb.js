import{_ as i,c as a,a as e,o as t}from"./app-1dhAU6lT.js";const h={};function n(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="cmake" tabindex="-1"><a class="header-anchor" href="#cmake"><span>CMake</span></a></h2><p>在 CMake 中使用 <code>pkg-config</code> 的典型配置如下：</p><div class="language-cmake" data-highlighter="shiki" data-ext="cmake" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cmake"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">find_package</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(PkgConfig)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pkg_search_module(GTEST REQUIRED gtest_main)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_executable</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testapp)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target_sources</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testapp </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PRIVATE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> samples/sample3_unittest.cc)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target_link_libraries</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testapp </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PRIVATE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${GTEST_LDFLAGS}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">target_compile_options</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(testapp </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">PRIVATE</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> \${GTEST_CFLAGS}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">enable_testing</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">()</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">add_test</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">(first_and_only_test testapp)</span></span></code></pre></div><p>建议优先使用 <code>target_compile_options</code> 与 <code>_CFLAGS</code>，而非 <code>target_include_directories</code> 与 <code>INCLUDE_DIRS</code>， 因为前者不仅包含 <code>-I</code> 标志（GoogleTest 可能需要特定宏来告知内部头文件是否启用线程支持）。 此外，编译阶段可能仍需 <code>-pthread</code> 参数，若拆分 pkg-config 的 <code>Cflags</code> 变量可能导致该标志丢失。 同理，推荐使用 <code>_LDFLAGS</code> 而非更常见的 <code>_LIBRARIES</code>，以避免丢失 <code>-L</code> 标志和 <code>-pthread</code>。</p><p>GoogleTest 提供了 pkg-config 配置文件，可用于确定编译和链接 GoogleTest（及 GoogleMock）所需的所有标志参数。 pkg-config 采用标准化的纯文本格式，包含以下关键信息：</p><ul><li>包含目录路径（<code>-I</code>）</li><li>必要的宏定义（<code>-D</code>）</li><li>其他必需标志（<code>-pthread</code>）</li><li>库文件路径（<code>-L</code>）</li><li>待链接库名称（<code>-l</code>）</li></ul><p>当前主流构建系统均支持 pkg-config。</p><p>本文所有示例均假设你需要编译 <code>samples/sample3_unittest.cc</code> 示例文件。</p><h2 id="故障排除-pkg-config-找不到-googletest" tabindex="-1"><a class="header-anchor" href="#故障排除-pkg-config-找不到-googletest"><span>故障排除：pkg-config 找不到 GoogleTest</span></a></h2><p>执行上述 <code>CMakeLists.txt</code> 文件时可能会遇到以下错误：</p><div class="language-ansi" data-highlighter="shiki" data-ext="ansi" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ansi"><span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">-- Checking for one of the modules &#39;gtest_main&#39;</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">CMake Error at /usr/share/cmake/Modules/FindPkgConfig.cmake:640 (message):</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">  None of the required &#39;gtest_main&#39; found</span></span></code></pre></div><p>此错误常见于用户手动安装 GoogleTest 而非通过发行版包管理器安装的情况。 解决方法是配置 pkg-config 的 <code>.pc</code> 文件搜索路径。 假设 GoogleTest 安装于 <code>/usr/local</code>，则 <code>.pc</code> 文件可能位于 <code>/usr/local/lib64/pkgconfig</code>。 此时，应设置环境变量：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PKG_CONFIG_PATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">usr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">local</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lib64</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pkgconfig</span></span></code></pre></div><p>pkg-config 将自动搜索 <code>PKG_CONFIG_PATH</code> 路径来定位 <code>gtest_main.pc</code>。</p><h2 id="交叉编译环境配置" tabindex="-1"><a class="header-anchor" href="#交叉编译环境配置"><span>交叉编译环境配置</span></a></h2><p>pkg-config 同样支持交叉编译场景。 假定目标系统的最终安装前缀为 <code>/usr</code>，sysroot 路径为 <code>/home/MYUSER/sysroot</code>。 用户可按以下步骤配置安装 GoogleTest：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -DCMAKE_INSTALL_PREFIX=/usr</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ..</span></span></code></pre></div><p>使用 <code>DESTDIR</code> 参数将其安装到 sysroot：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">make</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -j</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> DESTDIR=/home/MYUSER/sysroot</span></span></code></pre></div><p>在继续操作前，强烈建议在交叉编译环境中定义以下两个 pkg-config 变量：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PKG_CONFIG_ALLOW_SYSTEM_CFLAGS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">yes</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PKG_CONFIG_ALLOW_SYSTEM_LIBS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">yes</span></span></code></pre></div><p>否则 pkg-config 将自动过滤针对标准前缀（如 <code>/usr</code>）的 <code>-I</code> 和 <code>-L</code> 标志 （阅读 <a href="https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3" target="_blank" rel="noopener noreferrer">https://bugs.freedesktop.org/show_bug.cgi?id=28264#c3</a> 了解该过滤的作用）。</p><p>观察按上述操作生成的 pkg-config 文件示例：</p><div class="language-properties" data-highlighter="shiki" data-ext="properties" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-properties"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">libdir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/usr/lib64</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">includedir</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/usr/include</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Name: gtest</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Description: GoogleTest (without main() function)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Version: 1.11.0</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">URL: https://github.com/google/googletest</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Libs: -L\${libdir} -lgtest -lpthread</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Cflags: -I\${includedir} -</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">DGTEST_HAS_PTHREAD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1 -lpthread</span></span></code></pre></div><p>这里 sysroot 路径未被包含在 <code>libdir</code> 和 <code>includedir</code> 中！ 若使用 <code>PKG_CONFIG_LIBDIR=/home/MYUSER/sysroot/usr/lib64/pkgconfig</code> 执行 pkg-config，则：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pkg-config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cflags</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gtest</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">-DGTEST_HAS_PTHREAD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> -lpthread</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -I/usr/include</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pkg-config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --libs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gtest</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-L/usr/lib64</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -lgtest</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -lpthread</span></span></code></pre></div><p>显然输出结果有误，其指向了 <code>CBUILD</code> 而非 <code>CHOST</code> 根路径。 为正确配置交叉编译，需告知 pkg-config 将实际 sysroot 路径注入至 <code>-I</code> 和 <code>-L</code> 参数：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PKG_CONFIG_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PKG_CONFIG_SYSROOT_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">home</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MYUSER</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">sysroot</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">export</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PKG_CONFIG_LIBDIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=\${</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PKG_CONFIG_SYSROOT_DIR</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">usr</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lib64</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pkgconfig</span></span></code></pre></div><p>之后再执行 pkg-config 将获得正确结果：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pkg-config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --cflags</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gtest</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">-DGTEST_HAS_PTHREAD</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> -lpthread</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -I/home/MYUSER/sysroot/usr/include</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pkg-config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --libs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gtest</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-L/home/MYUSER/sysroot/usr/lib64</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -lgtest</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -lpthread</span></span></code></pre></div><p>输出结果包含了正确的 sysroot 路径。 关于包含 <code>\${CHOST}</code> 参数的完整配置指南，请参考 Diego Elio Pettenò 的权威教程：<a href="https://autotools.io/pkgconfig/cross-compiling.html" target="_blank" rel="noopener noreferrer">https://autotools.io/pkgconfig/cross-compiling.html</a>。</p>`,31)]))}const p=i(h,[["render",n]]),d=JSON.parse('{"path":"/gtest/pkgconfig/","title":"使用 pkg-config","lang":"zh-CN","frontmatter":{"title":"使用 pkg-config","createTime":"2025/04/21 13:59:28","permalink":"/gtest/pkgconfig/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/pkgconfig.html"},"description":"CMake 在 CMake 中使用 pkg-config 的典型配置如下： 建议优先使用 target_compile_options 与 _CFLAGS，而非 target_include_directories 与 INCLUDE_DIRS， 因为前者不仅包含 -I 标志（GoogleTest 可能需要特定宏来告知内部头文件是否启用线程支持）。 此...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 pkg-config\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-22T11:27:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/pkgconfig/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"使用 pkg-config"}],["meta",{"property":"og:description","content":"CMake 在 CMake 中使用 pkg-config 的典型配置如下： 建议优先使用 target_compile_options 与 _CFLAGS，而非 target_include_directories 与 INCLUDE_DIRS， 因为前者不仅包含 -I 标志（GoogleTest 可能需要特定宏来告知内部头文件是否启用线程支持）。 此..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T11:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T11:27:50.000Z"}]]},"readingTime":{"minutes":2.6,"words":779},"git":{"createdTime":1745225282000,"updatedTime":1745321270000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/pkgconfig.md","headers":[]}');export{p as comp,d as data};
