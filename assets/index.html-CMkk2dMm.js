import{_ as i,c as a,a as t,o as h}from"./app-1dhAU6lT.js";const n={};function k(l,s){return h(),a("div",null,s[0]||(s[0]=[t(`<p>在开发中，将路径转换为字符串是一种常见的需求。 由于字符串编码的复杂性，Rust 在处理这一问题时也有些麻烦，初学者可能会遇到问题。 本文将探讨如何在 Rust 中解决这一问题，并给出项目开发实践中的一些建议。</p><h2 id="表示路径的类型" tabindex="-1"><a class="header-anchor" href="#表示路径的类型"><span>表示路径的类型</span></a></h2><p>Rust 中有两种表示路径的类型：</p><ul><li><code>PathBuf</code>：拥有所有权且可变的路径，类似于 <code>String</code>。</li><li><code>Path</code>：路径的切片，类似于 <code>str</code>。</li></ul><p>这两种类型实际上是 <code>OsString</code> 和 <code>OsStr</code> 的封装，而非使用 Rust 默认的字符串类型，因此在转换为 <code>String</code> 或 <code>str</code> 时比较麻烦。</p><div class="hint-container info"><p class="hint-container-title"><code>OsString</code></p><p>用于存储当前平台的原生字符串类型。</p><p>字符串在 Unix 上通常为非零 UTF-8 编码，在 Windows 上通常为非零 UTF-16 编码。 这与 Rust 的默认字符串不匹配，因此使用 <code>OsString</code> 来弥合这种差距。</p><p>需要注意，<code>OsString</code> 内部不一定是按照平台原生的形式来保存字符串，只是提供了一种与原生字符串交互的途径。</p></div><h2 id="路径转换为字符串的方法" tabindex="-1"><a class="header-anchor" href="#路径转换为字符串的方法"><span>路径转换为字符串的方法</span></a></h2><p>由于 <code>PathBuf</code> 实现了 <code>Deref&lt;Target=Path&gt;</code>，因此这里仅介绍 <code>Path</code> 的方法。</p><h3 id="获取-osstr-后转化" tabindex="-1"><a class="header-anchor" href="#获取-osstr-后转化"><span>获取 <code>OsStr</code> 后转化</span></a></h3><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">impl</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> as_os_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">OsStr</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>可以调用上面提供的方法先将路径转化为 <code>OsStr</code> 再转换为字符串。</p><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">impl</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> OsStr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  /// 如果为有效的 Unicode 编码，返回内部 str，否则返回 None</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  /// 该方法不会涉及拷贝或重编码，但是需要对字符串做有效性检查</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> to_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Option</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  /// 如果为有效的 Unicode 编码，返回内部 str，不作任何转换</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  /// 否则，会将所有无效部分替换为 U+FFFD(�) 再返回，这需要分配新的内存</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> to_string_lossy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Cow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&#39;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>如果最终需要得到 <code>String</code>，还需再做额外的转换，完整代码如下：</p><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./foo/bar.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">assert_eq!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">  String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./foo/bar.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">as_os_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">unwrap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">assert_eq!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">  String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./foo/bar.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">as_os_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_string_lossy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">into_owned</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>通常如果使用 <code>to_str</code> 会搭配 <code>unwrap</code>，表示我们预期输入是合法 Unicode。</p><p>而如果只是想要一个可用的字符串用于打印/日志，一般建议使用 <code>to_string_lossy</code>。 它只会在必要的时候进行有损转换，大多数情况下与 <code>to_str</code> 没有性能差异。</p><h3 id="直接调用-path-的转换方法" tabindex="-1"><a class="header-anchor" href="#直接调用-path-的转换方法"><span>直接调用 <code>Path</code> 的转换方法</span></a></h3><p>由于将 <code>Path</code> 转换为字符串的操作很普遍，Rust 为上面的操作提供了以下便携方法：</p><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">impl</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> to_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Option</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> to_string_lossy</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Cow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&#39;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>在使用时可以直接调用这两个方法，无需经过 <code>OsStr</code> 的转换。</p><h3 id="display-接口" tabindex="-1"><a class="header-anchor" href="#display-接口"><span><code>Display</code> 接口</span></a></h3><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">impl</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  pub</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&#39;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p><code>Path</code> 提供了一个专门用于打印路径的方法，其行为类似 <code>to_string_lossy</code>，返回一个实现了 <code>Display</code> trait 的类型。 因此也可以使用该方法来获取字符串：</p><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./foo/bar.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">assert_eq!</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">  String</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">new</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./foo/bar.txt</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  path</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><p>不过一般不建议使用该方法，更推荐使用意义更为明确的 <code>to_string_lossy</code>。</p><h2 id="个人实践" tabindex="-1"><a class="header-anchor" href="#个人实践"><span>个人实践</span></a></h2><p>一般我会根据需要选择 <code>to_str</code> 和 <code>to_string_lossy</code>：</p><ul><li>如果要保证输入为合法 Unicode，选择 <code>to_str</code>。</li><li>如果无法确认输入的编码，或者需要用于打印/日志，选择 <code>to_string_lossy</code>。</li></ul><p>使用这些方法将路径转换为字符串会比较冗长，因此我会将其封装为对应的 trait:</p><div class="language-rust" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-rust"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">pub</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> trait</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> PathStr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> to_utf8_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">impl</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> PathStr</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> for</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  fn</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> to_utf8_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -&gt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    self</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_str</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">unwrap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">to_string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>你可以根据自己的需要调整上面函数，只需在使用时导入对应的 trait 即可。</p>`,31)]))}const e=i(n,[["render",k]]),r=JSON.parse('{"path":"/article/ai80resl/","title":"Rust 中如何将 Path 转换为字符串？","lang":"zh-CN","frontmatter":{"title":"Rust 中如何将 Path 转换为字符串？","createTime":"2025-09-10T19:49:01.000Z","permalink":"/article/ai80resl/","tags":["Rust","字符串","路径处理"],"description":"在开发中，将路径转换为字符串是一种常见的需求。 由于字符串编码的复杂性，Rust 在处理这一问题时也有些麻烦，初学者可能会遇到问题。 本文将探讨如何在 Rust 中解决这一问题，并给出项目开发实践中的一些建议。 表示路径的类型 Rust 中有两种表示路径的类型： PathBuf：拥有所有权且可变的路径，类似于 String。 Path：路径的切片，类似...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 中如何将 Path 转换为字符串？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-10T11:54:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/article/ai80resl/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"Rust 中如何将 Path 转换为字符串？"}],["meta",{"property":"og:description","content":"在开发中，将路径转换为字符串是一种常见的需求。 由于字符串编码的复杂性，Rust 在处理这一问题时也有些麻烦，初学者可能会遇到问题。 本文将探讨如何在 Rust 中解决这一问题，并给出项目开发实践中的一些建议。 表示路径的类型 Rust 中有两种表示路径的类型： PathBuf：拥有所有权且可变的路径，类似于 String。 Path：路径的切片，类似..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-10T11:54:49.000Z"}],["meta",{"property":"article:tag","content":"路径处理"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:tag","content":"Rust"}],["meta",{"property":"article:modified_time","content":"2025-09-10T11:54:49.000Z"}]]},"readingTime":{"minutes":3.17,"words":950},"git":{"createdTime":1757505289000,"updatedTime":1757505289000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"Rust杂谈/Rust中如何将Path转换为字符串？.md","headers":[],"categoryList":[{"id":"9536dd","sort":10008,"name":"Rust杂谈"}]}');export{e as comp,r as data};
