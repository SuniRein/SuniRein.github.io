import{_ as a,c as l,b as s,a as n,d,e as i,w as h,r as k,o as p}from"./app-1dhAU6lT.js";const r={};function o(g,t){const e=k("VPLink");return p(),l("div",null,[s("p",null,[d(e,{href:"../gmock_for_dummies.md#actions-what-should-it-do"},{default:h(()=>t[0]||(t[0]=[s("strong",null,"动作",-1)])),_:1,__:[0]}),t[1]||(t[1]=i("用于指定模拟函数被调用时应执行的操作。 本文列出 GoogleTest 提供的内置动作。 所有动作均定义在 ",-1)),t[2]||(t[2]=s("code",null,"::testing",-1)),t[3]||(t[3]=i(" 命名空间内。",-1))]),t[4]||(t[4]=n(`<h2 id="返回值类" tabindex="-1"><a class="header-anchor" href="#返回值类"><span>返回值类</span></a></h2><table><thead><tr><th style="text-align:left;">动作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Return()</code></td><td style="text-align:left;">从返回类型为 <code>void</code> 的函数中返回。</td></tr><tr><td style="text-align:left;"><code>Return(value)</code></td><td style="text-align:left;">返回 <code>value</code>。若 <code>value</code> 类型与模拟函数返回类型不一致，将在<strong>设置期望时</strong>（而非执行动作时）进行类型转换。</td></tr><tr><td style="text-align:left;"><code>ReturnArg&lt;N&gt;()</code></td><td style="text-align:left;">返回第 <code>N</code> 个（从 0 开始）参数。</td></tr><tr><td style="text-align:left;"><code>ReturnNew&lt;T&gt;(a1, ..., ak)</code></td><td style="text-align:left;">返回 <code>new T(a1, ..., ak)</code>；每次运行会创建新对象。</td></tr><tr><td style="text-align:left;"><code>ReturnNull()</code></td><td style="text-align:left;">返回空指针。</td></tr><tr><td style="text-align:left;"><code>ReturnPointee(ptr)</code></td><td style="text-align:left;">返回 <code>ptr</code> 指向的值。</td></tr><tr><td style="text-align:left;"><code>ReturnRef(variable)</code></td><td style="text-align:left;">返回 <code>variable</code> 的引用。</td></tr><tr><td style="text-align:left;"><code>ReturnRefOfCopy(value)</code></td><td style="text-align:left;">返回 <code>value</code> 副本的引用；该副本在动作生命周期内有效。</td></tr><tr><td style="text-align:left;"><code>ReturnRoundRobin({a1, ..., ak})</code></td><td style="text-align:left;">每次调用返回列表中的下一个元素，到达末尾时循环至开头。</td></tr></tbody></table><h2 id="副作用类" tabindex="-1"><a class="header-anchor" href="#副作用类"><span>副作用类</span></a></h2><table><thead><tr><th style="text-align:left;">动作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Assign(&amp;variable, value)</code></td><td style="text-align:left;">将 <code>value</code> 赋值给 <code>variable</code>。</td></tr><tr><td style="text-align:left;"><code>DeleteArg&lt;N&gt;()</code></td><td style="text-align:left;">删除第 <code>N</code> 个参数（必须为指针）。</td></tr><tr><td style="text-align:left;"><code>SaveArg&lt;N&gt;(pointer)</code></td><td style="text-align:left;">通过拷贝赋值将第 <code>N</code> 个参数存入 <code>*pointer</code>。</td></tr><tr><td style="text-align:left;"><code>SaveArgByMove&lt;N&gt;(pointer)</code></td><td style="text-align:left;">通过移动赋值将第 <code>N</code> 个参数存入 <code>*pointer</code>。</td></tr><tr><td style="text-align:left;"><code>SaveArgPointee&lt;N&gt;(pointer)</code></td><td style="text-align:left;">将第 <code>N</code> 个参数指向的值存入 <code>*pointer</code>。</td></tr><tr><td style="text-align:left;"><code>SetArgReferee&lt;N&gt;(value)</code></td><td style="text-align:left;">将 <code>value</code> 赋值给第 <code>N</code> 个参数引用的变量。</td></tr><tr><td style="text-align:left;"><code>SetArgPointee&lt;N&gt;(value)</code></td><td style="text-align:left;">将 <code>value</code> 赋值给第 <code>N</code> 个参数指向的变量。</td></tr><tr><td style="text-align:left;"><code>SetArgumentPointee&lt;N&gt;(value)</code></td><td style="text-align:left;">同 <code>SetArgPointee&lt;N&gt;(value)</code>。已弃用。将在 v1.7.0 移除。</td></tr><tr><td style="text-align:left;"><code>SetArrayArgument&lt;N&gt;(first, last)</code></td><td style="text-align:left;">将源范围 <code>[first, last)</code> 的元素拷贝到第 <code>N</code> 个参数指向的数组（可以是指针或迭代器）。该动作不持有源范围元素所有权。</td></tr><tr><td style="text-align:left;"><code>SetErrnoAndReturn(error, value)</code></td><td style="text-align:left;">设置 <code>errno</code> 为 <code>error</code> 并返回 <code>value</code>。</td></tr><tr><td style="text-align:left;"><code>Throw(exception)</code></td><td style="text-align:left;">抛出指定异常（可为任意可拷贝值）。v1.1.0 起可用。</td></tr></tbody></table><h2 id="使用函数-仿函数-lambda-充当动作" tabindex="-1"><a class="header-anchor" href="#使用函数-仿函数-lambda-充当动作"><span>使用函数/仿函数/Lambda 充当动作</span></a></h2><p>下文中的“可调用对象”指自由函数、<code>std::function</code>、仿函数或 lambda。</p><table><thead><tr><th style="text-align:left;">动作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>f</code></td><td style="text-align:left;">使用模拟函数参数调用可调用对象 <code>f</code>。</td></tr><tr><td style="text-align:left;"><code>Invoke(f)</code></td><td style="text-align:left;">使用模拟函数参数调用全局/静态函数或仿函数 <code>f</code>。</td></tr><tr><td style="text-align:left;"><code>Invoke(object_pointer, &amp;class::method)</code></td><td style="text-align:left;">使用模拟函数参数调用对象的方法。</td></tr><tr><td style="text-align:left;"><code>InvokeWithoutArgs(f)</code></td><td style="text-align:left;">调用无参数的全局/静态函数或仿函数 <code>f</code>。</td></tr><tr><td style="text-align:left;"><code>InvokeWithoutArgs(object_pointer, &amp;class::method)</code></td><td style="text-align:left;">调用对象的无参数方法。</td></tr><tr><td style="text-align:left;"><code>InvokeArgument&lt;N&gt;(arg1, arg2, ..., argk)</code></td><td style="text-align:left;">使用 <code>k</code> 个参数调用模拟函数的第 <code>N</code> 个参数（必须为函数或仿函数）。</td></tr></tbody></table><p>被调用函数的返回值将作为动作的返回值。</p><p>在定义与 <code>Invoke*()</code> 配合使用的可调用对象时，可用 <code>Unused</code> 来声明未使用的参数：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Distance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Unused</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sqrt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">x </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPECT_CALL</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">mock</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hi</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> _</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)).</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">WillOnce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Distance</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre></div><p><code>Invoke(callback)</code> 和 <code>InvokeWithoutArgs(callback)</code> 将接管 <code>callback</code> 的所有权，因此其需为持久对象。 <code>callback</code> 必须为基类回调类型而非派生类：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BlockingClosure</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> done </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> BlockingClosure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">... </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">done</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 编译失败</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Closure</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> done2 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> BlockingClosure</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">... </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Invoke</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">done2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 编译成功</span></span></code></pre></div><p>在 <code>InvokeArgument&lt;N&gt;(...)</code> 中，若需传递引用参数，应使用 <code>std::ref()</code> 包装：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">InvokeArgument</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">InvokeArgument</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hi</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">))</span></span></code></pre></div><p>这将按值传入 <code>5</code> 和 <code>string(&quot;Hi&quot;)</code> 及按引用传入 <code>foo</code> 来调用模拟函数的第 <code>2</code> 个参数。</p><h2 id="默认动作" tabindex="-1"><a class="header-anchor" href="#默认动作"><span>默认动作</span></a></h2><table><thead><tr><th style="text-align:left;">动作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>DoDefault()</code></td><td style="text-align:left;">执行默认动作（由 <code>ON_CALL()</code> 指定或使用内置默认动作）。</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>因技术限制，<code>DoDefault()</code> 不可用于复合动作内部，否则会导致运行时错误。</p></div><h2 id="复合动作" tabindex="-1"><a class="header-anchor" href="#复合动作"><span>复合动作</span></a></h2><table><thead><tr><th style="text-align:left;">动作</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>DoAll(a1, a2, ..., an)</code></td><td style="text-align:left;">执行所有动作 <code>a1</code> 至 <code>an</code>，返回 <code>an</code> 的结果。前 <code>n-1</code> 个动作必须返回 <code>void</code> ，它们将接收参数的只读视图。</td></tr><tr><td style="text-align:left;"><code>IgnoreResult(a)</code></td><td style="text-align:left;">执行动作 <code>a</code> 并忽略其结果（<code>a</code> 必须返回非 <code>void</code>）。</td></tr><tr><td style="text-align:left;"><code>WithArg&lt;N&gt;(a)</code></td><td style="text-align:left;">将模拟函数的第 <code>N</code> 个参数传递给动作 <code>a</code> 并执行。</td></tr><tr><td style="text-align:left;"><code>WithArgs&lt;N1, N2, ..., Nk&gt;(a)</code></td><td style="text-align:left;">将选定参数传递给动作 <code>a</code> 并执行。</td></tr><tr><td style="text-align:left;"><code>WithoutArgs(a)</code></td><td style="text-align:left;">无参数执行动作 <code>a</code>。</td></tr></tbody></table><h2 id="定义动作" tabindex="-1"><a class="header-anchor" href="#定义动作"><span>定义动作</span></a></h2><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ACTION</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> arg0 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> arg1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>定义返回第 0 与第 1 参数之和的动作 <code>Sum()</code>。</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ACTION_P</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Plus</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> arg0 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>定义返回第 0 参数与 <code>n</code> 之和的动作 <code>Plus(n)</code>。</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ACTION_Pk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> p1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // statements;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>定义执行指定语句的参数化动作 <code>Foo(p1, ..., pk)</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>ACTION*</code> 系列宏不可在函数或类内部使用。</p></div>`,28))])}const y=a(r,[["render",o]]),A=JSON.parse('{"path":"/gtest/reference/actions/","title":"动作参考","lang":"zh-CN","frontmatter":{"title":"动作参考","createTime":"2025-04-08T18:19:08.000Z","permalink":"/gtest/reference/actions/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/reference/actions.html"},"description":"用于指定模拟函数被调用时应执行的操作。 本文列出 GoogleTest 提供的内置动作。 所有动作均定义在 ::testing 命名空间内。 返回值类 副作用类 使用函数/仿函数/Lambda 充当动作 下文中的“可调用对象”指自由函数、std::function、仿函数或 lambda。 被调用函数的返回值将作为动作的返回值。 在定义与 Invoke...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"动作参考\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-22T11:27:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/reference/actions/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"动作参考"}],["meta",{"property":"og:description","content":"用于指定模拟函数被调用时应执行的操作。 本文列出 GoogleTest 提供的内置动作。 所有动作均定义在 ::testing 命名空间内。 返回值类 副作用类 使用函数/仿函数/Lambda 充当动作 下文中的“可调用对象”指自由函数、std::function、仿函数或 lambda。 被调用函数的返回值将作为动作的返回值。 在定义与 Invoke..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T11:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T11:27:50.000Z"}]]},"readingTime":{"minutes":3.66,"words":1097},"git":{"createdTime":1744107574000,"updatedTime":1745321270000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/reference/actions.md","headers":[]}');export{y as comp,A as data};
