import{_ as d,c as r,b as i,a as t,e as a,d as e,w as l,r as o,o as h}from"./app-1dhAU6lT.js";const k={},g={class:"code-block-title","data-title":"MODULE.bazel"},c={class:"code-block-title-bar"},u={class:"title"},b={class:"code-block-title","data-title":"hello_test.cc"},m={class:"code-block-title-bar"},y={class:"title"},f={class:"code-block-title","data-title":"BUILD"},v={class:"code-block-title-bar"},B={class:"title"},z={class:"hint-container note"};function A(C,s){const n=o("VPLink"),p=o("VPIcon");return h(),r("div",null,[s[24]||(s[24]=i("p",null,"本教程旨在帮助你使用 Bazel 构建系统快速上手 GoogleTest。 如果你是第一次使用 GoogleTest 或是需要复习，我们推荐你从本教程开始。",-1)),s[25]||(s[25]=i("h2",{id:"先决条件",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#先决条件"},[i("span",null,"先决条件")])],-1)),s[26]||(s[26]=i("p",null,"要完成本教程，你需要：",-1)),s[27]||(s[27]=i("ul",null,[i("li",null,"一个兼容的操作系统（例如 Linux、macOS、Windows）。"),i("li",null,"一个兼容的 C++ 编译器，至少支持 C++14。"),i("li",null,[i("a",{href:"https://bazel.build/",target:"_blank",rel:"noopener noreferrer"},"Bazel"),a(" 7.0 或更高版本，这是 GoogleTest 团队首选的构建系统。")])],-1)),i("p",null,[s[1]||(s[1]=a("有关与 GoogleTest 兼容的平台的更多信息，请参阅",-1)),e(n,{href:"platforms.md"},{default:l(()=>s[0]||(s[0]=[a("支持的平台",-1)])),_:1,__:[0]}),s[2]||(s[2]=a("。",-1))]),s[28]||(s[28]=t('<p>如果你尚未安装 Bazel，请参阅 <a href="https://bazel.build/install" target="_blank" rel="noopener noreferrer">Bazel 安装指南</a>。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>本教程中的终端命令均采用 Unix shell 格式。</p></div><h2 id="设置-bazel-工作区" tabindex="-1"><a class="header-anchor" href="#设置-bazel-工作区"><span>设置 Bazel 工作区</span></a></h2><p><a href="https://docs.bazel.build/versions/main/build-ref.html#workspace" target="_blank" rel="noopener noreferrer">Bazel 工作区（Bazel workspace）</a> 是你文件系统上的一个目录，用于管理你要构建的项目的源文件。 每个工作区目录都有一个名为 <code>MODULE.bazel</code> 的文本文件，该文件包含构建程序所需的外部依赖项的描述。</p><p>首先，为创建一个目录作为你的工作区：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my_workspace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &amp;&amp;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> my_workspace</span></span></code></pre></div><p>接下来，创建 <code>MODULE.bazel</code> 文件以指定依赖项。 从 Bazel 7.0 开始，推荐通过 <a href="https://registry.bazel.build/modules/googletest" target="_blank" rel="noopener noreferrer">Bazel 中央注册表（Bazel Central Registry）</a> 使用 GoogleTest。 为此，请在你的 Bazel 工作区的根目录下创建 <code>MODULE.bazel</code> 文件，内容如下：</p>',7)),i("div",g,[i("div",c,[i("span",u,[e(p,{provider:"iconify",name:"vscode-icons:file-type-bazel"}),s[3]||(s[3]=a("MODULE.bazel",-1))])]),s[4]||(s[4]=t(`<div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-txt"><span class="line"><span># 这里的 version 请填入 https://registry.bazel.build/modules/googletest 上可用的最新版本</span></span>
<span class="line"><span>bazel_dep(name = &quot;googletest&quot;, version = &quot;</span><span class="highlighted-word">1.16.0</span><span>&quot;)</span></span></code></pre></div>`,1))]),s[29]||(s[29]=i("p",null,"现在你已经做好了构建使用 GoogleTest 的 C++ 项目的准备。",-1)),s[30]||(s[30]=i("h2",{id:"创建并运行测试",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#创建并运行测试"},[i("span",null,"创建并运行测试")])],-1)),s[31]||(s[31]=i("p",null,"设置好 Bazel 工作区后，你现在可以在自己的项目中使用 GoogleTest。",-1)),s[32]||(s[32]=i("p",null,[a("作为一个示例，在你的 "),i("code",null,"my_workspace"),a(" 目录中创建一个名为 "),i("code",null,"hello_test.cc"),a(" 的文件，内容如下：")],-1)),i("div",b,[i("div",m,[i("span",y,[e(p,{provider:"iconify",name:"vscode-icons:file-type-cpp"}),s[5]||(s[5]=a("hello_test.cc",-1))])]),s[6]||(s[6]=t(`<div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">gtest/gtest.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 演示一些基本的断言。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HelloTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> BasicAssertions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 期望两个字符串不相等。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_STRNE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hello</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">world</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 期望相等。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">7</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> *</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 42</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div>`,1))]),i("p",null,[s[8]||(s[8]=a("GoogleTest 为你提供了",-1)),e(n,{href:"primer.md#assertions"},{default:l(()=>s[7]||(s[7]=[a("断言（",-1),i("em",null,"assertions",-1),a("）",-1)])),_:1,__:[7]}),s[9]||(s[9]=a("来测试代码的行为。 上面的示例中包含了 GoogleTest 的主要头文件，并演示了一些基本的断言。",-1))]),s[33]||(s[33]=i("p",null,[a("要构建该测试，请在同一目录中创建一个名为 "),i("code",null,"BUILD"),a(" 的文件，内容如下：")],-1)),i("div",f,[i("div",v,[i("span",B,[e(p,{provider:"iconify",name:"vscode-icons:file-type-bazel"}),s[10]||(s[10]=a("BUILD",-1))])]),s[11]||(s[11]=t(`<div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-txt"><span class="line"><span>cc_test(</span></span>
<span class="line"><span>    name = &quot;hello_test&quot;,</span></span>
<span class="line"><span>    size = &quot;small&quot;,</span></span>
<span class="line"><span>    srcs = [&quot;hello_test.cc&quot;],</span></span>
<span class="line"><span>    deps = [</span></span>
<span class="line"><span>        &quot;@googletest//:gtest&quot;,</span></span>
<span class="line"><span>        &quot;@googletest//:gtest_main&quot;,</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>)</span></span></code></pre></div>`,1))]),s[34]||(s[34]=t('<p>此 <code>cc_test</code> 规则声明了你要构建的 C++ 测试文件， 并链接 GoogleTest 库（<code>@googletest//:gtest</code>）和 <code>main()</code> 函数（<code>@googletest//:gtest_main</code>）。 有关 Bazel <code>BUILD</code> 文件的更多信息，请参阅 <a href="https://docs.bazel.build/versions/main/tutorial/cpp.html" target="_blank" rel="noopener noreferrer">Bazel C++ 教程</a>。</p>',1)),i("div",z,[s[19]||(s[19]=i("p",{class:"hint-container-title"},"注",-1)),i("p",null,[s[13]||(s[13]=a("在下面的示例中，我们假定使用 Clang 或 GCC，并设置 ",-1)),s[14]||(s[14]=i("code",null,"--cxxopt=-std=c++14",-1)),s[15]||(s[15]=a(" 以确保 GoogleTest 以 C++14 而不是编译器的默认设置（可能是 C++11）进行编译。 对于 MSVC，等效的设置是 ",-1)),s[16]||(s[16]=i("code",null,"--cxxopt=/std:c++14",-1)),s[17]||(s[17]=a("。 有关支持的语言版本的更多详细信息，请参阅",-1)),e(n,{href:"platforms.md"},{default:l(()=>s[12]||(s[12]=[a("支持的平台",-1)])),_:1,__:[12]}),s[18]||(s[18]=a("。",-1))])]),s[35]||(s[35]=t(`<p>现在你可以构建并运行你的测试：</p><div class="language-ansi" data-highlighter="shiki" data-ext="ansi" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ansi"><span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">$ bazel test --cxxopt=-std=c++14 --test_output=all //:hello_test</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: Analyzed target //:hello_test (26 packages loaded, 362 targets configured).</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: Found 1 test target...</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: From Testing //:hello_test:</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">==================== Test output for //:hello_test:</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">Running main() from gmock_main.cc</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[==========] Running 1 test from 1 test suite.</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[----------] Global test environment set-up.</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[----------] 1 test from HelloTest</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[ RUN ] HelloTest.BasicAssertions</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[ OK ] HelloTest.BasicAssertions (0 ms)</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[----------] 1 test from HelloTest (0 ms total)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[----------] Global test environment tear-down</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[==========] 1 test from 1 test suite ran. (0 ms total)</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">[ PASSED ] 1 test.</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">================================================================================</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">Target //:hello_test up-to-date:</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">bazel-bin/hello_test</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: Elapsed time: 4.190s, Critical Path: 3.05s</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: 27 processes: 8 internal, 19 linux-sandbox.</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: Build completed successfully, 27 total actions</span></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">//:hello_test PASSED in 0.1s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;">INFO: Build completed successfully, 27 total actions</span></span></code></pre></div><p>恭喜！你成功使用 GoogleTest 构建并运行了一个测试。</p><h2 id="下一步" tabindex="-1"><a class="header-anchor" href="#下一步"><span>下一步</span></a></h2>`,4)),i("ul",null,[i("li",null,[i("p",null,[e(n,{href:"primer.md"},{default:l(()=>s[20]||(s[20]=[a("初学者指南",-1)])),_:1,__:[20]}),s[21]||(s[21]=a("：开始学习如何编写简单的测试。",-1))])]),i("li",null,[i("p",null,[e(n,{href:"samples.md"},{default:l(()=>s[22]||(s[22]=[a("代码示例",-1)])),_:1,__:[22]}),s[23]||(s[23]=a("：获取更多使用各种 GoogleTest 功能的示例。",-1))])])])])}const D=d(k,[["render",A]]),x=JSON.parse('{"path":"/gtest/quickstart-bazel/","title":"快速开始：Bazel","lang":"zh-CN","frontmatter":{"title":"快速开始：Bazel","createTime":"2025/03/04 11:27:25","permalink":"/gtest/quickstart-bazel/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/quickstart-bazel.html"},"description":"本教程旨在帮助你使用 Bazel 构建系统快速上手 GoogleTest。 如果你是第一次使用 GoogleTest 或是需要复习，我们推荐你从本教程开始。 先决条件 要完成本教程，你需要： 一个兼容的操作系统（例如 Linux、macOS、Windows）。 一个兼容的 C++ 编译器，至少支持 C++14。 Bazel 7.0 或更高版本，这是 G...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"快速开始：Bazel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-22T11:27:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/quickstart-bazel/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"快速开始：Bazel"}],["meta",{"property":"og:description","content":"本教程旨在帮助你使用 Bazel 构建系统快速上手 GoogleTest。 如果你是第一次使用 GoogleTest 或是需要复习，我们推荐你从本教程开始。 先决条件 要完成本教程，你需要： 一个兼容的操作系统（例如 Linux、macOS、Windows）。 一个兼容的 C++ 编译器，至少支持 C++14。 Bazel 7.0 或更高版本，这是 G..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T11:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T11:27:50.000Z"}]]},"readingTime":{"minutes":3.11,"words":932},"git":{"createdTime":1741072013000,"updatedTime":1745321270000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":5,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/quickstart-bazel.md","headers":[]}');export{D as comp,x as data};
