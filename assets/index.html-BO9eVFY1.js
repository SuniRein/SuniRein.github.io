import{_ as p,c as d,b as i,a as e,e as a,d as n,w as h,r as k,o as r}from"./app-1dhAU6lT.js";const o={},g={class:"hint-container note"},c={class:"code-block-title","data-title":"foo.h"},y={class:"code-block-title-bar"},A={class:"title"},E={class:"code-block-title","data-title":"foo.cc"},D={class:"code-block-title-bar"},T={class:"title"},B={class:"code-block-title","data-title":"foo.h"},C={class:"code-block-title-bar"},f={class:"title"};function u(m,s){const t=k("VPLink"),l=k("VPIcon");return r(),d("div",null,[s[44]||(s[44]=i("h2",{id:"names-not-contain-underscore",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#names-not-contain-underscore"},[i("span",null,"为什么测试套件名称和测试名称不应包含下划线？")])],-1)),i("div",g,[s[5]||(s[5]=i("p",{class:"hint-container-title"},"注",-1)),i("p",null,[s[1]||(s[1]=a("除了下列原因外，GoogleTest 还保留下划线（",-1)),s[2]||(s[2]=i("code",null,"_",-1)),s[3]||(s[3]=a("）用于特殊用途的关键字，例如 ",-1)),n(t,{href:"advanced.md#temporarily-disabling-tests"},{default:h(()=>s[0]||(s[0]=[i("code",null,"DISABLED_",-1),a(" 前缀",-1)])),_:1,__:[0]}),s[4]||(s[4]=a("。",-1))])]),s[45]||(s[45]=e(`<p>下划线（<code>_</code>）具有特殊性，因为 C++ 保留以下情况供编译器和标准库使用：</p><ol><li>任何以 <code>_</code> 开头后跟大写字母的标识符</li><li>任何名称中包含连续两个下划线（即 <code>__</code>）的标识符</li></ol><p>用户代码被严格禁止使用此类标识符。</p><p>现在让我们看看这对 <code>TEST</code> 和 <code>TEST_F</code> 意味着什么。</p><p>目前 <code>TEST(TestSuiteName, TestName)</code> 会生成名为 <code>TestSuiteName_TestName_Test</code> 的类。 如果 <code>TestSuiteName</code> 或 <code>TestName</code> 包含 <code>_</code> 会发生什么？</p><ol><li>如果 <code>TestSuiteName</code> 以 <code>_</code> 开头后跟大写字母（例如 <code>_Foo</code>），将生成 <code>_Foo_TestName_Test</code>。</li><li>如果 <code>TestSuiteName</code> 以 <code>_</code> 结尾（例如 <code>Foo_</code>），将生成 <code>Foo__TestName_Test</code>。</li><li>如果 <code>TestName</code> 以 <code>_</code> 开头（例如 <code>_Bar</code>），将生成 <code>TestSuiteName__Bar_Test</code>。</li><li>如果 <code>TestName</code> 以 <code>_</code> 结尾（例如 <code>Bar_</code>），将生成 <code>TestSuiteName_Bar__Test</code>。</li></ol><p>这些都是保留标识符，不能使用。</p><p>因此显然 <code>TestSuiteName</code> 和 <code>TestName</code> 不能以 <code>_</code> 开头或结尾 （实际上，只要 <code>_</code> 后不跟大写字母，<code>TestSuiteName</code> 就可以以 <code>_</code> 开头。 但这样会使规则复杂化。 为简单起见，我们统一规定不能以 <code>_</code> 开头）。</p><p>看起来在名称中间使用 <code>_</code> 没有问题。 但考虑以下情况：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Time</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Flies_Like_An_Arrow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Time_Flies</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Like_An_Arrow</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>这两个 <code>TEST</code> 宏会生成相同的类名（<code>Time_Flies_Like_An_Arrow_Test</code>），从而产生问题。</p><p>因此，为简化规则，我们要求用户在 <code>TestSuiteName</code> 和 <code>TestName</code> 中完全避免使用 <code>_</code>。 虽然该规则比实际需求更严格，但简单易记。 这也为 GoogleTest 未来的实现变化留有余地。</p><p>如果违反此规则，可能不会立即出现问题， 但使用新编译器（或新版本编译器）或新版本 GoogleTest 时，测试可能会崩溃。 因此最好遵守此规则。</p><h2 id="为什么-googletest-支持-expect-eq-null-ptr-和-assert-eq-null-ptr-但不支持-expect-ne-null-ptr-和-assert-ne-null-ptr" tabindex="-1"><a class="header-anchor" href="#为什么-googletest-支持-expect-eq-null-ptr-和-assert-eq-null-ptr-但不支持-expect-ne-null-ptr-和-assert-ne-null-ptr"><span>为什么 GoogleTest 支持 <code>EXPECT_EQ(NULL, ptr)</code> 和 <code>ASSERT_EQ(NULL, ptr)</code>，但不支持 <code>EXPECT_NE(NULL, ptr)</code> 和 <code>ASSERT_NE(NULL, ptr)</code>？</span></a></h2><p>首先，你可以使用 <code>nullptr</code> 来配合这些宏， 例如 <code>EXPECT_EQ(ptr, nullptr)</code>、<code>EXPECT_NE(ptr, nullptr)</code>、<code>ASSERT_EQ(ptr, nullptr)</code>、<code>ASSERT_NE(ptr, nullptr)</code>。 这是风格指南推荐的方式，因为 <code>nullptr</code> 没有 <code>NULL</code> 的类型问题。</p><p>由于 C++ 的特殊性，支持在 <code>EXPECT_XX()</code> 和 <code>ASSERT_XX()</code> 宏中使用 <code>NULL</code> 需要复杂的模板元编程技巧。 因此我们只在最需要的地方实现它（否则会使 GoogleTest 的实现更难维护且更易出错）。</p><p>历史上，<code>EXPECT_EQ()</code> 宏曾将<strong>预期值</strong>作为第一个参数，<strong>实际值</strong>作为第二个参数，不过现在不鼓励这种参数顺序。 用户确实需要编写 <code>EXPECT_EQ(NULL, some_expression)</code> 的需求是合理的，也确实被多次提出，因此我们实现了它。</p><p>对 <code>EXPECT_NE(NULL, ptr)</code> 的需求并不强烈。 当断言失败时，<code>ptr</code> 必为 <code>NULL</code>，因此打印 <code>ptr</code> 的值不会提供额外信息。 这意味着，<code>EXPECT_TRUE(ptr != NULL)</code> 同样有效。</p><p>如果支持 <code>EXPECT_NE(NULL, ptr)</code>，为了保持一致性也需要支持 <code>EXPECT_NE(ptr, NULL)</code>。 这将使实现中的模板元编程技巧使用次数翻倍，显著增加理解和维护难度。 我们认为收益不值得付出这样的成本。</p><p>最后，随着 gMock 匹配器库的发展，我们鼓励用户更多使用统一的 <code>EXPECT_THAT(value, matcher)</code> 语法。 匹配器方法的重要优势是可以轻松组合新匹配器，而 <code>EXPECT_NE</code> 等宏无法轻松组合。 因此我们更倾向于在匹配器上投入精力。</p><h2 id="我需要测试接口的不同实现是否满足共同要求-应该使用类型化测试还是值参数化测试" tabindex="-1"><a class="header-anchor" href="#我需要测试接口的不同实现是否满足共同要求-应该使用类型化测试还是值参数化测试"><span>我需要测试接口的不同实现是否满足共同要求，应该使用类型化测试还是值参数化测试？</span></a></h2><p>要验证同一接口的不同实现是否满足共同要求，类型化测试和值参数化测试均可适用。 具体选择取决于实际场景：</p><ul><li><p>若不同实现实例的创建方式仅类型不同则<strong>类型化测试</strong>更易编写。例如：</p><ul><li>所有实现都具有公有默认构造函数（可使用 <code>new TypeParam</code>）。</li><li>工厂函数形式统一（如 <code>CreateInstance&lt;TypeParam&gt;()</code>）。</li></ul></li><li><p>若不同实现实例需要不同的创建模式则<strong>值参数化测试</strong>更适用。 例如：<code>new Foo</code> vs <code>new Bar(5)</code>。 要消除这种差异，可以编写工厂函数包装器，并将函数指针作为参数传递给测试。</p></li><li><p>调试信息差异：</p><ul><li>类型化测试失败时会默认输出类型名称，便于快速定位问题实现。</li><li>值参数化测试默认仅显示失败迭代的编号。 用户需通过定义迭代名称函数，作为第三个参数传递给 <code>INSTANTIATE_TEST_SUITE_P</code> 来加强输出信息。</li></ul></li><li><p>使用类型化测试时，需确保测试是针对接口类型而非具体实现类型 （即需验证 <code>implicit_cast&lt;MyInterface*&gt;(my_concrete_impl)</code> 有效，而不仅是 <code>my_concrete_impl</code> 有效）。 值参数化测试在此方面更不易出错。</p></li></ul><p>建议实践两种方法以深入理解其细微差异，通过实际体验更易做出合适选择。</p><h2 id="死亡测试中的状态修改为何在测试结束后丢失" tabindex="-1"><a class="header-anchor" href="#死亡测试中的状态修改为何在测试结束后丢失"><span>死亡测试中的状态修改为何在测试结束后丢失？</span></a></h2><p>死亡测试（<code>EXPECT_DEATH</code> 等）在子进程中执行，以确保预期的崩溃不会终止主测试进程。 因此，任何内存副作用仅存在于子进程中，主进程无法观测子进程状态变化。 可以将死亡测试视为在&quot;平行宇宙&quot;中运行。</p><p>特别指出，若在死亡测试调用模拟方法，主进程会认为调用从未发生。 因此，可能需要将 <code>EXPECT_CALL</code> 语句移动到 <code>EXPECT_DEATH</code> 内部。</p><h2 id="在优化模式下使用-expect-eq-htonl-blah-blah-blah-为何报编译错误" tabindex="-1"><a class="header-anchor" href="#在优化模式下使用-expect-eq-htonl-blah-blah-blah-为何报编译错误"><span>在优化模式下使用 <code>EXPECT_EQ(htonl(blah), blah_blah)</code> 为何报编译错误？</span></a></h2><p>该问题源于 <code>htonl()</code> 的实现缺陷：</p><p>根据 <code>&#39;man htonl&#39;</code> 文档，<code>htonl()</code> 本应作为函数存在，因此可被用作函数指针。 但在优化模式下，<code>htonl()</code> 被定义为宏，这违反了规范要求。</p><p>更严重的是，<code>htonl()</code> 的宏实现使用了 gcc 扩展语法，不符合标准 C++ 规范。 这种非标准实现存在特定限制， 例如无法在模板参数中使用 <code>Foo&lt;sizeof(htonl(x))&gt;</code> 这样的表达式（其中 <code>Foo</code> 是接受整型参数的模板）。</p><p><code>EXPECT_EQ(a, b)</code> 的实现会在模板参数中使用 <code>sizeof(... a ...)</code>。 因此，当参数 <code>a</code> 包含 <code>htonl()</code> 调用时，在优化模式下将无法通过编译。 由于需要兼容不同编译器和平台，很难让 <code>EXPECT_EQ</code> 绕过这个 <code>htonl()</code> 的缺陷。</p><h2 id="编译器报-undefined-references-错误-但我已在类内定义相应的静态常量成员变量。问题出在哪里" tabindex="-1"><a class="header-anchor" href="#编译器报-undefined-references-错误-但我已在类内定义相应的静态常量成员变量。问题出在哪里"><span>编译器报 <code>undefined references</code> 错误，但我已在类内定义相应的静态常量成员变量。问题出在哪里？</span></a></h2><p>当类包含静态数据成员时：</p>`,34)),i("div",c,[i("div",y,[i("span",A,[n(l,{provider:"iconify",name:"vscode-icons:file-type-c"}),s[6]||(s[6]=a("foo.h",-1))])]),s[7]||(s[7]=e(`<div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> kBar </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div>`,1))]),s[46]||(s[46]=i("p",null,[a("仍需在 "),i("code",null,"foo.cc"),a(" 文件中进行外部定义：")],-1)),i("div",E,[i("div",D,[i("span",T,[n(l,{provider:"iconify",name:"vscode-icons:file-type-cpp"}),s[8]||(s[8]=a("foo.cc",-1))])]),s[9]||(s[9]=e('<div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">kBar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 此处不需要初始化</span></span></code></pre></div>',1))]),s[47]||(s[47]=i("p",null,[a("否则将产生无效的 C++ 代码，可能导致意外错误。 特别是在 GoogleTest 的断言宏（如 EXPECT_EQ）中使用时，会引发 "),i("code",null,"undefined reference"),a(" 链接错误。 之前能运行并不意味着代码正确，只是侥幸成功。")],-1)),s[48]||(s[48]=i("p",null,[a("若使用 "),i("code",null,"constexpr"),a(" 声明静态成员，则会隐式生成 "),i("code",null,"inline"),a(" 定义，此时无需在 "),i("code",null,"foo.cc"),a(" 中重复定义：")],-1)),i("div",B,[i("div",C,[i("span",f,[n(l,{provider:"iconify",name:"vscode-icons:file-type-c"}),s[10]||(s[10]=a("foo.h",-1))])]),s[11]||(s[11]=e(`<div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> constexpr</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> kBar </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 直接定义 kBar，无需在 foo.cc 中重复</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div>`,1))]),s[49]||(s[49]=e(`<h2 id="能否让测试夹具继承另一个夹具" tabindex="-1"><a class="header-anchor" href="#能否让测试夹具继承另一个夹具"><span>能否让测试夹具继承另一个夹具？</span></a></h2><p>可以。</p><p>每个测试夹具对应唯一的一个同名测试套件，这意味着一个测试夹具只有一个测试套件可以使用。 但有时多个测试用例需要共享相似的夹具逻辑。 例如，确保 GUI 库的所有测试套件都不会泄漏字体、画笔等系统资源。</p><p>在 GoogleTest 中，可将共享逻辑放在基类夹具，然后为每个测试套件派生子类夹具。 使用 <code>TEST_F()</code> 编写基于派生夹具的测试。</p><p>典型实现如下：</p><div class="language-c++" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 定义基类测试夹具</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BaseTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> protected</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 从 BaseTest 派生 FooTest 夹具</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BaseTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> protected</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SetUp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    BaseTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">SetUp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 先初始化基类夹具</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... 扩展初始化逻辑 ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TearDown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // ... FooTest 的清理逻辑 ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    BaseTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TearDown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 最后清理基类夹具</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ... FooTest 的成员函数和变量 ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用 FooTest 夹具的测试用例</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Baz</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ... 其他从 BaseTest 派生的夹具 ...</span></span></code></pre></div><p>如有需要，可继续继承派生夹具。 GoogleTest 对继承层次深度没有限制。</p><p>完整示例参见 <a href="https://github.com/google/googletest/blob/main/googletest/samples/sample5_unittest.cc" target="_blank" rel="noopener noreferrer">sample5_unittest.cc</a>。</p><h2 id="编译器报-void-value-not-ignored-as-it-ought-to-be-是什么意思" tabindex="-1"><a class="header-anchor" href="#编译器报-void-value-not-ignored-as-it-ought-to-be-是什么意思"><span>编译器报 <code>void value not ignored as it ought to be</code> 是什么意思？</span></a></h2>`,9)),i("p",null,[s[13]||(s[13]=a("此错误通常意味着您在非 ",-1)),s[14]||(s[14]=i("code",null,"void",-1)),s[15]||(s[15]=a(" 函数中使用了 ",-1)),s[16]||(s[16]=i("code",null,"ASSERT_*()",-1)),s[17]||(s[17]=a(" 断言。 由于 Google 的构建系统禁用了异常机制，",-1)),s[18]||(s[18]=i("code",null,"ASSERT_*()",-1)),s[19]||(s[19]=a(" 系列断言仅可在返回类型为 ",-1)),s[20]||(s[20]=i("code",null,"void",-1)),s[21]||(s[21]=a(" 的函数中使用。 更多技术细节请参阅",-1)),n(t,{href:"advanced.md#assertion-placement"},{default:h(()=>s[12]||(s[12]=[a("可以使用断言的范围",-1)])),_:1,__:[12]}),s[22]||(s[22]=a("。",-1))]),s[50]||(s[50]=i("h2",{id:"死亡测试卡死-或段错误-如何修复",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#死亡测试卡死-或段错误-如何修复"},[i("span",null,"死亡测试卡死（或段错误）如何修复？")])],-1)),i("p",null,[s[24]||(s[24]=a("GoogleTest 的死亡测试在子进程中运行，其工作机制较为特殊。 编写死亡测试前必须理解其工作原理——详见断言参考中的",-1)),n(t,{href:"reference/assertions.md#death"},{default:h(()=>s[23]||(s[23]=[a("死亡断言",-1)])),_:1,__:[23]}),s[25]||(s[25]=a("章节。",-1))]),s[51]||(s[51]=e('<p>特别要注意，死亡测试无法兼容父进程中存在多线程的情况。 首要解决方法是消除在 <code>EXPECT_DEATH()</code> 外部创建线程的行为，例如在测试中使用模拟对象替代真实对象。</p><p>有时这种情况不可避免，例如必须使用的某些库在 <code>main()</code> 函数执行前就创建线程时。 这时可通过两种方式降低冲突概率： 尽可能将更多操作移至 <code>EXPECT_DEATH()</code> 内部（极端情况下需移入全部操作），或尽量减少其外部依赖。 此外，可将死亡测试风格设为 <code>&quot;threadsafe&quot;</code>，这更安全但更慢。</p><p>若使用 <code>&quot;threadsafe&quot;</code> 死亡测试，需注意其会在子进程中从头重新运行测试程序。 因此必须确保程序能并行执行自身副本且具有确定性行为。</p><p>本质上，这属于并发编程的范畴。 用户必须确保程序中不存在竞态条件或死锁。 很遗憾，此问题没有通用解决方案！</p><h2 id="CtorVsSetUp" tabindex="-1"><a class="header-anchor" href="#CtorVsSetUp"><span>我应该使用测试夹具的构造函数/析构函数还是 <code>SetUp()</code>/<code>TearDown()</code>？</span></a></h2><p>首先需要明确：GoogleTest 不会在多个测试之间复用同一个测试夹具对象。 对于每个 <code>TEST_F</code> 测试用例，GoogleTest 都会创建一个全新的测试夹具对象， 调用 <code>SetUp()</code> 方法，运行测试主体，调用 <code>TearDown()</code> 方法，然后删除该测试夹具对象。</p><p>当需要编写每个测试专用的设置和清理逻辑时， 可以选择使用测试夹具的构造函数/析构函数或 <code>SetUp()</code>/<code>TearDown()</code> 方法。 通常推荐使用前者，因为它具有以下优势：</p><ul><li>通过在构造函数中初始化成员变量，可以将其声明为 <code>const</code> 类型， 这有助于防止意外修改其值，使测试逻辑更加明确可靠。</li><li>当需要派生测试夹具类时，子类构造函数会首先调用基类构造函数，子类析构函数会最后调用基类析构函数。 若使用 <code>SetUp()</code>/<code>TearDown()</code> 方法，子类可能忘记调用基类的对应方法或在错误时机调用。</li></ul><p>不过，在以下场景中，则建议使用 <code>SetUp()</code>/<code>TearDown()</code>：</p><ul><li>C++ 不允许在构造函数和析构函数中调用虚函数。 虽然可以调用声明为 <code>virtual</code> 的方法，但不会使用动态派发机制，而是使用当前执行构造函数所属类中的定义。 这是因为，在派生类构造函数执行前调用虚函数可能操作未初始化数据，存在风险。 因此，若需要调用会被派生类重写的方法，必须使用 <code>SetUp()</code>/ <code>TearDown()</code> 。</li><li>在构造函数（或析构函数）体内无法使用 <code>ASSERT_xx</code> 断言宏。 如果设置操作可能导致需要中止当前测试的致命错误，必须使用 <code>abort</code> 终止整个测试程序， 或改用 <code>SetUp()</code> 替代构造函数。</li><li>如果清理操作可能抛出异常，必须使用 <code>TearDown()</code> 而非析构函数， 因为在析构函数中抛出异常会导致未定义行为（通常直接终止程序）。 注意，当编译器启用异常时，许多标准库（如 STL）都可能抛出异常。 因此，若需要编写兼容异常启用/禁用环境的可移植测试代码，应优先选择 <code>TearDown()</code> 。</li><li>GoogleTest 团队正考虑在启用异常的平台上（如 Windows、Mac OS 和 Linux 客户端），将断言宏改为抛出异常。 这将消除用户需要手动将子程序错误传递到调用方的需求。 因此，如果代码可能运行在此类平台，不应在析构函数中使用 GoogleTest 断言。</li></ul><h2 id="使用-assert-pred-时编译器报错-no-matching-function-to-call-如何解决" tabindex="-1"><a class="header-anchor" href="#使用-assert-pred-时编译器报错-no-matching-function-to-call-如何解决"><span>使用 <code>ASSERT_PRED*</code> 时编译器报错 <code>no matching function to call</code>，如何解决？</span></a></h2>',11)),i("p",null,[s[27]||(s[27]=a("请查阅断言参考中的 ",-1)),n(t,{href:"reference/assertions.md#EXPECT_PRED"},{default:h(()=>s[26]||(s[26]=[i("code",null,"EXPECT_PRED*",-1)])),_:1,__:[26]}),s[28]||(s[28]=a(" 一节。",-1))]),s[52]||(s[52]=e('<h2 id="调用-run-all-tests-时编译器警告-ignoring-return-value-原因为何" tabindex="-1"><a class="header-anchor" href="#调用-run-all-tests-时编译器警告-ignoring-return-value-原因为何"><span>调用 <code>RUN_ALL_TESTS()</code> 时编译器警告 <code>ignoring return value</code>，原因为何？</span></a></h2><p>有些开发者会忽略 <code>RUN_ALL_TESTS()</code> 的返回值，即不写：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RUN_ALL_TESTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre></div><p>而是写成：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">RUN_ALL_TESTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre></div><p>这是错误且危险的。 测试框架需要通过检查 <code>RUN_ALL_TESTS()</code> 的返回值来判断测试是否通过。 如果 <code>main()</code> 函数忽略该返回值，即使存在 GoogleTest 断言失败，测试仍会被判定为成功。</p><p>我们已决定修复此问题（感谢 Michael Chastain 的建议）。 现在，使用 gcc 编译时，代码将无法忽略 <code>RUN_ALL_TESTS()</code> 的返回值。 如果忽略，会导致编译错误。</p><p>如果编译器提示 <code>ignoring return value</code>，解决方法很简单：确保将其返回值作为 <code>main()</code> 函数的返回结果。</p><p>但这种改动是否会破坏现有测试？ 事实上，此类代码原本就是错误的，因此我们并没有破坏现有有效代码。😃</p><h2 id="编译器提示构造函数-或析构函数-不能返回值-这是怎么回事" tabindex="-1"><a class="header-anchor" href="#编译器提示构造函数-或析构函数-不能返回值-这是怎么回事"><span>编译器提示构造函数（或析构函数）不能返回值，这是怎么回事？</span></a></h2><p>由于 C++ 的语法限制，为了支持向 <code>ASSERT_*</code> 断言流式传输消息的语法，例如：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ASSERT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">blah blah</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre></div>',12)),i("p",null,[s[30]||(s[30]=a("我们不得不禁止在构造函数和析构函数中使用 ",-1)),s[31]||(s[31]=i("code",null,"ASSERT*",-1)),s[32]||(s[32]=a(" 和 ",-1)),s[33]||(s[33]=i("code",null,"FAIL*",-1)),s[34]||(s[34]=a(" 系列宏（但 ",-1)),s[35]||(s[35]=i("code",null,"EXPECT*",-1)),s[36]||(s[36]=a(" 和 ",-1)),s[37]||(s[37]=i("code",null,"ADD_FAILURE*",-1)),s[38]||(s[38]=a(" 仍可用）。 解决方法是将构造函数/析构函数中的相关内容移至私有 ",-1)),s[39]||(s[39]=i("code",null,"void",-1)),s[40]||(s[40]=a(" 成员函数中，或改用 ",-1)),s[41]||(s[41]=i("code",null,"EXPECT_*()",-1)),s[42]||(s[42]=a(" 断言。 用户指南中的",-1)),n(t,{href:"advanced.md#assertion-placement"},{default:h(()=>s[29]||(s[29]=[a("此章节",-1)])),_:1,__:[29]}),s[43]||(s[43]=a("中对此有详细解释。",-1))]),s[53]||(s[53]=e(`<h2 id="setup-函数未被调用-原因为何" tabindex="-1"><a class="header-anchor" href="#setup-函数未被调用-原因为何"><span><code>SetUp()</code> 函数未被调用，原因为何？</span></a></h2><p>C++ 语言大小写敏感。 请检查是否误写为 <code>Setup()</code>？</p><p>类似地，有时开发者会将 <code>SetUpTestSuite()</code> 误拼为 <code>SetupTestSuite()</code>，导致该方法未被调用。</p><h2 id="多个测试套件共享相同的测试夹具逻辑时-必须为每个套件定义新的夹具类吗-这样似乎太繁琐了" tabindex="-1"><a class="header-anchor" href="#多个测试套件共享相同的测试夹具逻辑时-必须为每个套件定义新的夹具类吗-这样似乎太繁琐了"><span>多个测试套件共享相同的测试夹具逻辑时，必须为每个套件定义新的夹具类吗？这样似乎太繁琐了</span></a></h2><p>不需要重复定义。 你可以使用类型别名替代继承。</p><p>原始写法：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-diff vp-code"><code class="language-cpp"><span class="line diff remove"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BaseTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Abc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Def</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line diff remove"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> BaseTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Abc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Def</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>优化写法（使用 <code>typedef</code>）：</p><div class="language-c++" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark has-diff vp-code"><code class="language-c++"><span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> BaseTest FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Abc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Def</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> BaseTest BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Abc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Def</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="googletest-输出被大量-log-消息淹没-如何解决" tabindex="-1"><a class="header-anchor" href="#googletest-输出被大量-log-消息淹没-如何解决"><span>GoogleTest 输出被大量 LOG 消息淹没，如何解决？</span></a></h2><p>GoogleTest 的输出设计被为简洁易读的测试报告。 若测试代码自身产生文本输出，会与框架输出混杂影响可读性。</p><p>由于 <code>LOG</code> 消息输出到 stderr，而 GoogleTest 的输出默认送往 stdout，可通过重定向分离两者：</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./my_test</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &gt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> gtest_output.txt</span></span></code></pre></div><h2 id="为什么应该优先使用测试夹具而非全局变量" tabindex="-1"><a class="header-anchor" href="#为什么应该优先使用测试夹具而非全局变量"><span>为什么应该优先使用测试夹具而非全局变量？</span></a></h2><p>有以下原因：</p><ol><li>测试修改全局变量状态，易导致副作用溢出进而影响其他测试，增加调试难度。 使用夹具可为每个测试提供独立变量集（同名但不同实例），确保测试的隔离性。</li><li>全局变量会污染全局命名空间。</li><li>测试夹具可通过子类化复用，而全局变量难以实现此特性。 这在多个测试套件存在共性时特别有用。</li></ol><h2 id="assert-death-中的-statement-参数可以是哪些形式" tabindex="-1"><a class="header-anchor" href="#assert-death-中的-statement-参数可以是哪些形式"><span><code>ASSERT_DEATH()</code> 中的 <code>statement</code> 参数可以是哪些形式？</span></a></h2><p><code>ASSERT_DEATH(statement, matcher)</code>（及所有死亡断言宏）可对任何有效 <em><code>statement</code></em> 使用。 <em><code>statement</code></em> 可以是当前上下文中任意有效的 C++ 语句。 它可以引用全局或局部变量，可以是：</p><ul><li>简单的函数调用（常见形式）</li><li>复杂表达式</li><li>复合语句</li></ul><p>示例如下：</p><div class="language-c++" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 简单的函数调用</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FunctionCall</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ASSERT_DEATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Xyz</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Xyz failed</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 引用变量和函数的复杂表达式</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ComplexExpression</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> bool</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Condition</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ASSERT_DEATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">c </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">?</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Func1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> object2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">test</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)),</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">               &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">(Func1|Method) failed</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 死亡断言可在函数内任意位置使用（包括循环内部）</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> InsideLoop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 验证 Foo(0) 到 Foo(4) 均会崩溃</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    EXPECT_DEATH_M</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Foo has </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d+ errors</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">                   ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">where i is </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 死亡断言可包含复合语句</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">MyDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> CompoundStatement</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 验证 Bar(0) 到 Bar(4) 至少有一个崩溃</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ASSERT_DEATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">  &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Bar has </span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">\\\\</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d+ errors</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="我定义了测试夹具类-footest-但-test-f-footest-bar-依旧报错-no-matching-function-for-call-to-footest-footest-这是为什么" tabindex="-1"><a class="header-anchor" href="#我定义了测试夹具类-footest-但-test-f-footest-bar-依旧报错-no-matching-function-for-call-to-footest-footest-这是为什么"><span>我定义了测试夹具类 <code>FooTest</code>，但 <code>TEST_F(FooTest, Bar)</code> 依旧报错 <code>no matching function for call to FooTest::FooTest()</code>，这是为什么？</span></a></h2><p>GoogleTest 需要能够创建测试夹具类的对象，因此该类必须包含默认构造函数。 通常编译器会自动生成默认构造函数，但在以下情况需要手动定义：</p><ul><li>如果为 <code>FooTest</code> 显式声明了非默认构造函数（例如使用 <code>DISALLOW_EVIL_CONSTRUCTORS()</code> 宏）， 则必须定义默认构造函数，即使为空实现。</li><li>如果 <code>FooTest</code> 包含 <code>const</code> 修饰的非静态数据成员， 则必须定义默认构造函数，并在构造函数的初始化列表中初始化该成员。 （早期 <code>gcc</code> 版本存在不强制要求初始化 <code>const</code> 成员的缺陷，该问题已在 <code>gcc 4</code> 中修复。）</li></ul><h2 id="为什么使用-assert-death-时-googletest-要求将整个测试套件-而非单个测试-命名为-deathtest" tabindex="-1"><a class="header-anchor" href="#为什么使用-assert-death-时-googletest-要求将整个测试套件-而非单个测试-命名为-deathtest"><span>为什么使用 <code>ASSERT_DEATH</code> 时 GoogleTest 要求将整个测试套件（而非单个测试）命名为 <code>*DeathTest</code>？</span></a></h2><p>GoogleTest 不会交错运行不同测试套件中的测试。 也就是说，它会先运行完某个测试套件中的所有测试，在接着运行另一个测试套件中的所有测试，依此类推。 这样因为 GoogleTest 需要在首个测试运行前完成测试套件初始化，并在最后测试完成后执行清理工作。 如果拆分测试套件，会导致多次重复的初始化和清理操作，既降低效率又破坏语义清晰度。</p><p>如果允许测试名称为 <code>*DeathTest</code>，以下场景会产生矛盾：</p><div class="language-c++" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> AbcDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Uvw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DefDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">BarTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Xyz</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>由于需要保证 <code>FooTest.AbcDeathTest</code> 在 <code>BarTest.Xyz</code> 之前运行，同时不同测试套件不交叉执行， 就必须先执行完整套件 <code>FooTest</code> 再执行 <code>BarTest</code> 。 这与 <code>BarTest.DefDeathTest</code> 需要在 <code>FooTest.Uvw</code> 之前运行的要求冲突。</p><h2 id="我的测试套件同时包含死亡测试与普通测试-但我不想使用-deathtest-来命名整个套件-该怎么做" tabindex="-1"><a class="header-anchor" href="#我的测试套件同时包含死亡测试与普通测试-但我不想使用-deathtest-来命名整个套件-该怎么做"><span>我的测试套件同时包含死亡测试与普通测试，但我不想使用 <code>*DeathTest</code> 来命名整个套件，该怎么做？</span></a></h2><p>可以使用类型别名将测试套件拆分为 <code>FooTest</code> 和 <code>FooDeathTest</code>：</p><div class="language-c++" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Abc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Def</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">using</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Uvw</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">EXPECT_DEATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooDeathTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Xyz</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ASSERT_DEATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">...</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ... </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h2 id="googletest-只会在死亡测试失败时打印子进程的日志信息-如何在测试成功时查看日志" tabindex="-1"><a class="header-anchor" href="#googletest-只会在死亡测试失败时打印子进程的日志信息-如何在测试成功时查看日志"><span>GoogleTest 只会在死亡测试失败时打印子进程的日志信息，如何在测试成功时查看日志？</span></a></h2><p>打印 <code>EXPECT_DEATH()</code> 中语句的日志信息会影响主进程的日志可读性， 因此 GoogleTest 只会在死亡测试失败时打印这些信息。</p><p>如需查看成功时的日志，可以尝试临时破坏死亡测试（例如，改变某个正则匹配要求）。 这确实有点不方便。 我们可能会在完成 <code>fork-and-exec</code> 风格死亡测试后提供一个永久解决方案。</p><h2 id="使用断言时编译器报错-no-match-for-operator-如何解决" tabindex="-1"><a class="header-anchor" href="#使用断言时编译器报错-no-match-for-operator-如何解决"><span>使用断言时编译器报错 <code>no match for &#39;operator&lt;&lt;&#39;</code>，如何解决？</span></a></h2><p>当在断言中使用自定义类型 <code>FooType</code> 时，必须确保实现对应的流输出运算符，否则无法打印该类型：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ostream</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> operator</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">&lt;&lt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ostream</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooType</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span></code></pre></div><p>此外，该 <code>&lt;&lt;</code> 运算符必须定义在与 <code>FooType</code> 相应的命名空间中。 详见 <a href="https://abseil.io/tips/49" target="_blank" rel="noopener noreferrer">Tip of the Week #49</a>。</p><h2 id="如何屏蔽-windows-平台的内存泄漏警告" tabindex="-1"><a class="header-anchor" href="#如何屏蔽-windows-平台的内存泄漏警告"><span>如何屏蔽 Windows 平台的内存泄漏警告？</span></a></h2><p>由于静态初始化的 GoogleTest 单例对象需要申请堆内存， Visual C++ 内存检测器会在程序结束时报告内存泄漏。 最简单的解决方法是使用 <code>_CrtMemCheckpoint</code> 和 <code>_CrtMemDumpAllObjectsSince</code> 来抑制所有静态初始化的堆内存对象的报告。 更多细节与堆检测/调试例程说明详见 MSDN 文档。</p><h2 id="如何让代码检测是否运行在测试环境中" tabindex="-1"><a class="header-anchor" href="#如何让代码检测是否运行在测试环境中"><span>如何让代码检测是否运行在测试环境中？</span></a></h2><p>若你编写代码来嗅探是否处于测试环境并据此执行不同操作， 相当于将测试专用逻辑泄漏到生产代码中，且无法保证测试专用逻辑不会意外在生产环境中运行。 这种“聪明”的做法还会导致<a href="https://en.wikipedia.org/wiki/Heisenbug" target="_blank" rel="noopener noreferrer">海森堡缺陷</a>。 因此我们强烈反对这种做法，GoogleTest 也不提供相关支持。</p><p>通常，推荐使用<a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="noopener noreferrer">依赖注入</a>来实现不同环境下的差异化行为。 你可以为测试代码和生产代码分别注入不同功能。 由于生产代码完全不会链接测试逻辑（<code>BUILD</code> 目标的 <a href="https://docs.bazel.build/versions/master/be/common-definitions.html#common.testonly" target="_blank" rel="noopener noreferrer">testonly</a> 属性可确保这点），因此不会存在误执行风险。</p><p>不过，如果你确实别无选择，且遵循了测试程序名以 <code>_test</code> 结尾的命名规范， 则可以使用检测可执行文件名（<code>main()</code> 中的 <code>argv[0]</code>）这种<strong>极不推荐</strong>的黑客方法来判断代码是否处于测试环境。</p><h2 id="如何临时禁用某个测试" tabindex="-1"><a class="header-anchor" href="#如何临时禁用某个测试"><span>如何临时禁用某个测试？</span></a></h2><p>对于无法立即修复的故障测试，可在测试名前添加 <code>DISABLED_</code> 前缀。 这将禁用测试的执行。 此方法优于注释代码或使用 <code>#if 0</code>，因为被禁用的测试仍会参与编译（避免代码腐化）。</p><p>要执行被禁用的测试，只需在运行测试程序时添加 <code>--gtest_also_run_disabled_tests</code> 标志。</p><h2 id="是否允许在不同命名空间中定义同名-test-foo-bar-测试" tabindex="-1"><a class="header-anchor" href="#是否允许在不同命名空间中定义同名-test-foo-bar-测试"><span>是否允许在不同命名空间中定义同名 <code>TEST(Foo, Bar)</code> 测试？</span></a></h2><p>允许。</p><p>核心原则是：<strong>同一测试套件中的所有测试必须使用相同的夹具类</strong>。 以下示例<strong>允许</strong>存在，因为两个测试都使用相同的夹具类（<code>::testing::Test</code>）：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CoolTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DoSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  SUCCEED</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CoolTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DoSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  SUCCEED</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace bar</span></span></code></pre></div><p>但以下代码<strong>不被允许</strong>，这将导致 GoogleTest 运行时错误，因为测试位于相同测试套件但使用了不同的夹具类：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> CoolTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // Fixture foo::CoolTest</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CoolTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DoSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  SUCCEED</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> CoolTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // Fixture: bar::CoolTest</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">CoolTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DoSomething</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  SUCCEED</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace bar</span></span></code></pre></div>`,54))])}const S=p(o,[["render",u]]),v=JSON.parse('{"path":"/gtest/faq/","title":"gTest 常见问题解答","lang":"zh-CN","frontmatter":{"title":"gTest 常见问题解答","createTime":"2025-04-10T21:35:01.000Z","permalink":"/gtest/faq/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/faq.html"},"description":"为什么测试套件名称和测试名称不应包含下划线？ 注 除了下列原因外，GoogleTest 还保留下划线（_）用于特殊用途的关键字，例如 。 下划线（_）具有特殊性，因为 C++ 保留以下情况供编译器和标准库使用： 任何以 _ 开头后跟大写字母的标识符 任何名称中包含连续两个下划线（即 __）的标识符 用户代码被严格禁止使用此类标识符。 现在让我们看看这对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"gTest 常见问题解答\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-22T11:27:50.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/faq/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"gTest 常见问题解答"}],["meta",{"property":"og:description","content":"为什么测试套件名称和测试名称不应包含下划线？ 注 除了下列原因外，GoogleTest 还保留下划线（_）用于特殊用途的关键字，例如 。 下划线（_）具有特殊性，因为 C++ 保留以下情况供编译器和标准库使用： 任何以 _ 开头后跟大写字母的标识符 任何名称中包含连续两个下划线（即 __）的标识符 用户代码被严格禁止使用此类标识符。 现在让我们看看这对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-22T11:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-22T11:27:50.000Z"}]]},"readingTime":{"minutes":19.4,"words":5820},"git":{"createdTime":1744292301000,"updatedTime":1745321270000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/faq.md","headers":[]}');export{S as comp,v as data};
