import{_ as k,c as d,a as n,b as a,e as i,d as t,w as l,r as h,o as r}from"./app-1dhAU6lT.js";const g={},o={class:"vp-steps"},y={class:"hint-container caution"};function A(c,s){const e=h("VPLink"),p=h("Annotation");return r(),d("div",null,[s[62]||(s[62]=n('<h2 id="引言-为什么选择-googletest" tabindex="-1"><a class="header-anchor" href="#引言-为什么选择-googletest"><span>引言：为什么选择 GoogleTest？</span></a></h2><p><mark>GoogleTest</mark> 可以帮助你编写更好的 C++ 测试。</p><p>GoogleTest 是由 Google 的测试技术团队在考虑了 Google 的特定需求和约束后开发的测试框架。 无论你是在 Linux、Windows 还是 Mac 上工作，只要你在编写 C++ 代码，GoogleTest 都能帮助你。 它支持<strong>任何</strong>类型的测试，而不仅仅是单元测试。</p><p>那么，什么是一个好的测试，GoogleTest 又如何与之契合呢？我们相信：</p><ol><li><p>测试应该是<strong>独立的</strong>和<strong>可重复的</strong>。 调试一个会因其他测试而成功或失败的测试是很痛苦的。 GoogleTest 通过在不同的对象上运行测试来隔离不同的测试单元。 当一个测试单元失败时，GoogleTest 允许你单独运行它以便快速调试。</p></li><li><p>测试应该<strong>组织良好</strong>，并反映被测试代码的结构。 GoogleTest 将相关测试单元分组到测试套件（<em>test suite</em>）中，这些套件可以共享数据和子程序。 这种常见的模式易于识别，并使测试易于维护。 这样的一致性在人们切换项目并开始处理新代码库时尤其有帮助。</p></li><li><p>测试应该是<strong>可移植的</strong>和<strong>可复用的</strong>。 Google 有许多平台无关（platform-neutral）的代码，因此测试也应该是平台无关的。 GoogleTest 可以在不同的操作系统、不同的编译器、启用或不启用异常的情况下运行，因此可以与多种配置一起工作。</p></li><li><p>当测试失败时，它应该尽可能多地提供有关问题的<strong>信息</strong>。 GoogleTest 不会在第一次测试失败后停止，它只会停止当前测试单元并继续运行下一个测试单元。 你还可以测试一些非致命问题，即使这些测试未通过，当前测试单元依旧能继续运行。 因此，你可以在一个运行 - 编辑 - 编译周期中检测并修复多个错误。</p></li><li><p>测试框架应该将测试编写者从琐事中解放出来，让他们专注于<strong>测试内容</strong>本身。 GoogleTest 自动跟踪用户定义的测试单元，不需要用户手动枚举以运行它们。</p></li><li><p>测试应该是<strong>快速的</strong>。 使用 GoogleTest，你可以在测试单元之间复用共享资源，并且只需支付一次设置（<em>set-up</em>）/拆卸（<em>tear-down</em>）的成本，而不会使测试单元相互依赖。</p></li></ol><p>由于 GoogleTest 基于流行的 xUnit 架构，如果你以前使用过 JUnit 或 PyUnit，你会感到非常熟悉。 如果没有，你只需花大约 10 分钟来学习基础知识就可以开始使用。 那么，让我们开始吧！</p><h2 id="注意术语" tabindex="-1"><a class="header-anchor" href="#注意术语"><span>注意术语</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>由于术语 <em>Test</em>、<em>Test Case</em> 和 <em>Test Suite</em> 的不同定义可能会引起一些混淆，因此请注意不要误解这些术语。</p></div><p>历史上，GoogleTest 开始使用术语 <em>Test Case</em> 来分组相关测试， 而当前的出版物，包括国际软件测试资格委员会（<a href="https://www.istqb.org/" target="_blank" rel="noopener noreferrer">ISTQB</a>）材料和各种关于软件质量的教科书， 则使用术语 <a href="https://glossary.istqb.org/en_US/term/test-suite" target="_blank" rel="noopener noreferrer"><em>Test Suite</em></a> 来表示这一点。</p><p>在 GoogleTest 中使用的相关术语 <em>Test</em> 对应于 ISTQB 术语 <a href="https://glossary.istqb.org/en_US/term/test-case" target="_blank" rel="noopener noreferrer"><em>Test Case</em></a>。</p><p>术语 <em>Test</em> 通常具有足够广泛的意义，也包括 ISTQB 对 <em>Test Case</em> 的定义，所以在这里问题不大。 但 Google Test 中使用的术语 <em>Test Case</em> 具有矛盾的意义，因此容易引起混淆。</p><p>GoogleTest 最近开始将术语 <em>Test Case</em> 替换为 <em>Test Suite</em>。 目前首选的 API 是 <code>TestSuite</code>。较旧的 <code>TestCase</code> API 正在逐步弃用和重构。</p><p>因此，请注意术语的不同定义：</p><table><thead><tr><th style="text-align:left;">含义</th><th style="text-align:left;">GoogleTest 术语</th><th style="text-align:left;"><a href="https://www.istqb.org/" target="_blank" rel="noopener noreferrer">ISTQB</a> 术语</th></tr></thead><tbody><tr><td style="text-align:left;">使用特定输入值执行特定程序路径并验证结果</td><td style="text-align:left;"><a href="#simple-test">TEST()</a></td><td style="text-align:left;"><a href="https://glossary.istqb.org/en_US/term/test-case" target="_blank" rel="noopener noreferrer">Test Case</a></td></tr></tbody></table><div class="hint-container important"><p class="hint-container-title">译者注</p><p>本文采用 ISTQB 中的定义，对上面提到的三个术语统一采用以下翻译：</p><table><thead><tr><th style="text-align:center;">Test</th><th style="text-align:center;">Test Case</th><th style="text-align:center;">Test Suite</th></tr></thead><tbody><tr><td style="text-align:center;">测试</td><td style="text-align:center;">测试单元</td><td style="text-align:center;">测试套件</td></tr></tbody></table><p>这里的<strong>测试</strong>指代一个测试单元中的单个断言，<strong>测试单元</strong>相当于 GoogleTest 中的 <code>Test</code>，<strong>测试套件</strong>则相当于 <code>TestSuite</code>。 原文中部分术语混用，容易引发混淆，我在翻译的时候结合语境，将它们区分开来。</p></div><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>使用 GoogleTest 时，我们从编写<strong>断言</strong>（<em>assertion</em>）开始。 断言是检查条件是否为真的语句。 断言的结果可以是<strong>成功</strong>（<em>success</em>）、<strong>非致命失败</strong>（<em>nonfatal failure</em>）或<strong>致命失败</strong>（<em>fatal failure</em>）。 如果发生致命失败，它会中止当前测试单元，否则会正常继续运行。</p><p><strong>测试单元</strong>使用断言来验证被测试代码的行为。 如果测试崩溃或断言失败，则它<strong>失败</strong>（<em>fail</em>），否则它<strong>成功</strong>（<em>succeed</em>）。</p><p>一个<strong>测试套件</strong>包含一个或多个测试单元。 你应该将测试单元分组到反映被测试代码结构的测试套件中。 当测试套件中的多个测试单元需要共享公共对象和子程序时，你可以将它们放入一个<strong>测试夹具</strong>（<em>test fixture</em>）中。</p><p>一个<strong>测试程序</strong>（<em>test program</em>）可以包含多个测试套件。</p><p>我们现在将解释如何编写测试程序，从单个断言开始，逐步构建测试单元和测试套件。</p><h2 id="assertions" tabindex="-1"><a class="header-anchor" href="#assertions"><span>断言</span></a></h2><p>在 GoogleTest 中， <mark>断言</mark>是类似于函数的宏。 你通过对其行为进行断言来测试一个类或函数。 当断言失败时，GoogleTest 会打印断言所在的源文件和行号，以及相应的失败信息。 你也可以提供一个自定义的失败信息，这将附加到 GoogleTest 的输出信息中。</p><p>GoogleTest 提供了两种类型的断言，它们具有相同的测试功能，但失败时会对当前测试单元产生不同的影响。 <code>ASSERT_*</code> 版本在失败时产生致命失败，<strong>中止当前测试单元</strong>。 <code>EXPECT_*</code> 版本在失败时产生非致命失败，<strong>不会</strong>中止当前测试单元。 通常首选 <code>EXPECT_*</code>，因为它们允许在测试单元中同时报告多个失败。 但是，如果断言失败后继续运行没有意义，则应使用 <code>ASSERT_*</code>。</p><p>由于 <code>ASSERT_*</code> 失败后 会立即退出当前测试单元，可能会跳过之后的清理代码，因此可能会导致内存泄漏。 取决于泄漏的性质，它可能值得修复，也可能不值得修复。 如果你在断言失败之外还收到堆检查器的错误报告，请铭记这一点。</p>',25)),a("p",null,[s[1]||(s[1]=i("要提供自定义失败消息，只需使用 ",-1)),s[2]||(s[2]=a("code",null,"<<",-1)),s[3]||(s[3]=i(" 操作符将其流式传输到宏中。 下面给出了一个示例，使用 ",-1)),t(e,{href:"reference/assertions.md#EXPECT_EQ"},{default:l(()=>s[0]||(s[0]=[a("code",null,"ASSERT_EQ",-1),i(" 和 ",-1),a("code",null,"EXPECT_EQ",-1)])),_:1,__:[0]}),s[4]||(s[4]=i(" 宏来验证两个值相等：",-1))]),s[63]||(s[63]=n(`<div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ASSERT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Vectors x and y are of unequal length</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Vectors x and y differ at index </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>任何可以流式传输到 <code>ostream</code> 的内容都可以流式传输到断言宏中，包括 C 风格字符串和 <code>std::string</code> 对象。 如果宽字符串（<code>wchar_t*</code>、Windows 上 <code>UNICODE</code> 模式下的 <code>TCHAR*</code>、 <code>std::wstring</code>）被流式传输到断言，它将在打印时被转换为 UTF-8。</p>`,2)),a("p",null,[s[6]||(s[6]=i("GoogleTest 提供了一系列断言，让你能以多种方式来验证代码的行为。 你可以检查布尔条件、基于关系运算符比较值、验证字符串值、验证浮点值等等。 甚至还有一些断言允许你通过提供自定义谓词来验证更复杂的状态。 有关 GoogleTest 提供的完整断言列表，请参阅",-1)),t(e,{href:"reference/assertions.md"},{default:l(()=>s[5]||(s[5]=[i("断言参考",-1)])),_:1,__:[5]}),s[7]||(s[7]=i("。",-1))]),s[64]||(s[64]=n(`<h2 id="simple-test" tabindex="-1"><a class="header-anchor" href="#simple-test"><span>简单的测试单元</span></a></h2><p>要创建一个<mark>测试单元</mark>：</p><div class="vp-steps"><ol><li>使用 <code>TEST()</code> 宏定义并命名一个测试函数。这些是不返回值的普通 C++ 函数。</li><li>在此函数中，包含任何你想使用的有效 C++ 语句，使用各种 GoogleTest 断言来验证结果。</li><li>测试单元的结果由断言决定：如果测试单元中的任何断言失败（无论是致命还是非致命），或者测试单元崩溃，则整个测试单元失败。 否则，测试单元成功。</li></ol></div><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestSuiteName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ... 测试的内容 ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div>`,4)),a("p",null,[s[9]||(s[9]=a("code",null,"TEST()",-1)),s[10]||(s[10]=i(" 的参数从一般到具体。 ",-1)),s[11]||(s[11]=a("strong",null,"第一个",-1)),s[12]||(s[12]=i("参数是",-1)),s[13]||(s[13]=a("mark",null,"测试套件",-1)),s[14]||(s[14]=i("的名称，",-1)),s[15]||(s[15]=a("strong",null,"第二个",-1)),s[16]||(s[16]=i("参数是测试套件中的测试单元的名称。 两个名称都必须是有效的 C++ 标识符，并且不应包含任何下划线（",-1)),s[17]||(s[17]=a("code",null,"_",-1)),s[18]||(s[18]=i("）。",-1)),t(p,{label:"测试命名",total:1},{"item-0":l(()=>s[8]||(s[8]=[a("p",null,[i("GoogleTest 内部使用 "),a("code",null,"TestSuite_TestCase"),i(" 的格式来命名对应的测试单元对象，命名中包含下划线可能导致一些奇怪的错误。")],-1)])),_:1}),s[19]||(s[19]=i(" 测试单元的",-1)),s[20]||(s[20]=a("strong",null,"全名",-1)),s[21]||(s[21]=i("由其所属的测试套件和其单独名称组成。 不同测试套件中的测试单元可以具有相同的单独名称。",-1))]),s[65]||(s[65]=n(`<p>作为示例，我们来看一个简单的整数函数：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Factorial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 返回 n 的阶乘</span></span></code></pre></div><p>该函数的测试套件可能如下所示：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 测试 0 的阶乘</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FactorialTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HandlesZeroInput</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Factorial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 测试正数的阶乘</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FactorialTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HandlesPositiveInput</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Factorial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Factorial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Factorial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Factorial</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 40320</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>GoogleTest 按测试套件对测试结果进行分组，因此逻辑上相关的测试单元应放在同一个测试套件中。 也就是说，它们的 <code>TEST()</code> 的第一个参数应该相同。 在上面的示例中，我们有两个测试——<code>HandlesZeroInput</code> 和 <code>HandlesPositiveInput</code>，它们属于同一个测试套件 <code>FactorialTest</code>。</p><p>在命名测试套件和测试时，你应该遵循与<a href="https://google.github.io/styleguide/cppguide.html#Function_Names" target="_blank" rel="noopener noreferrer">为函数和类命名</a>相同的约定。</p><h2 id="same-data-multiple-tests" tabindex="-1"><a class="header-anchor" href="#same-data-multiple-tests"><span>测试夹具：为多个测试单元提供相同的数据配置</span></a></h2><p>如果你发现自己编写的多个测试单元使用类似的数据时，你可以使用<mark>测试夹具</mark>。 这允许你为多个不同的测试单元复用相同的配置。</p><p>要创建一个测试夹具：</p>`,9)),a("div",o,[a("ol",null,[s[31]||(s[31]=n("<li>自 <code>testing::Test</code> 派生一个类。 用 <code>protected:</code> 修饰其主体，因为我们希望子类能够访问该夹具的成员。</li><li>在类中声明你计划使用的任何对象。</li><li>如有必要，编写默认构造函数或 <code>SetUp()</code> 函数为每个测试单元分配资源。 一个常见的错误是将 <code>SetUp()</code> 拼写为 <code>Setup()</code>，即写成小写的 <code>u</code>——你可以在 C++11 中使用 <code>override</code> 来确保拼写的正确性。</li>",3)),a("li",null,[s[23]||(s[23]=i("如有必要，编写析构函数或 ",-1)),s[24]||(s[24]=a("code",null,"TearDown()",-1)),s[25]||(s[25]=i(" 函数以释放在 ",-1)),s[26]||(s[26]=a("code",null,"SetUp()",-1)),s[27]||(s[27]=i(" 中分配的任何资源。 要了解何时应使用构造函数/析构函数以及何时应使用 ",-1)),s[28]||(s[28]=a("code",null,"SetUp()/TearDown()",-1)),s[29]||(s[29]=i("，请阅读 ",-1)),t(e,{href:"faq.md#CtorVsSetUp"},{default:l(()=>s[22]||(s[22]=[i("gTest 常见问题解答",-1)])),_:1,__:[22]}),s[30]||(s[30]=i("。",-1))]),s[32]||(s[32]=a("li",null,"如有需要，为你的测试单元定义一些共享的子程序。",-1))])]),s[66]||(s[66]=n(`<p>使用测试夹具来定义测试单元时，要使用 <code>TEST_F()</code> 而不是 <code>TEST()</code>，它允许你访问测试夹具中的对象和子程序（<code>_F</code> 表示“Fixture”）：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">TestFixtureClassName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ... 测试的内容 ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>与 <code>TEST()</code> 不同，在 <code>TEST_F()</code> 中，第一个参数必须是对应测试夹具的名称。 此宏不需要指定测试套件名称。</p><p>不幸的是，C++ 的宏系统不允许我们创建一个可以处理两种类型的测试的单一宏，因此使用错误的宏会导致编译错误。</p><p>此外，在使用<code>TEST_F()</code> 之前，你必须先定义对应的夹具，否则你会得到编译错误 <code>virtual outside class declaration</code>。</p>`,5)),a("p",null,[s[34]||(s[34]=i("对于使用 ",-1)),s[35]||(s[35]=a("code",null,"TEST_F()",-1)),s[36]||(s[36]=i(" 定义的每个测试单元，GoogleTest 将在运行时创建一个",-1)),s[37]||(s[37]=a("strong",null,"全新的",-1)),s[38]||(s[38]=i("测试夹具对象， 通过 ",-1)),s[39]||(s[39]=a("code",null,"SetUp()",-1)),s[40]||(s[40]=i(" 初始化它，运行测试，通过调用 ",-1)),s[41]||(s[41]=a("code",null,"TearDown()",-1)),s[42]||(s[42]=i(" 释放资源，最后删除该夹具。 请注意，同一测试套件中的不同测试单元具有不同的测试夹具对象，且 GoogleTest 总是在创建下一个夹具之前删除先前的夹具。 GoogleTest",-1)),s[43]||(s[43]=a("strong",null,"不会",-1)),s[44]||(s[44]=i("为多个测试单元复用同一个夹具对象。 在一个测试单元中对测试夹具所做的任何更改都不会影响其他测试单元。",-1)),t(p,{label:"测试夹具",total:1},{"item-0":l(()=>s[33]||(s[33]=[a("p",null,"除非你在夹具中使用一些静态或全局的资源，这就要求用户自行来保证测试单元之间的独立性了。",-1)])),_:1})]),s[67]||(s[67]=n(`<p>例如，让我们为一个名为 <code>Queue</code> 的 FIFO 队列类编写测试，该类具有以下接口：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typename</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> E</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  Queue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Enqueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">  E</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Dequeue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 如果队列为空，则返回 nullptr</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  size_t</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>首先，定义一个测试夹具类。 按照惯例，你应该将其命名为 <code>FooTest</code>，其中 <code>Foo</code> 是被测试的类。</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> QueueTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> protected</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  QueueTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // q0_ 保持为空</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">     q1_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">     q2_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">     q2_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Enqueue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // ~QueueTest() override = default;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  Queue</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;int&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q0_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  Queue</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;int&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q1_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  Queue</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;int&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> q2_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre></div><p>在这种情况下，我们不需要定义析构函数或 <code>TearDown()</code> 方法，因为编译器自动生成的析构函数将执行所有必要的清理工作。</p><p>现在我们将使用 <code>TEST_F()</code> 和此夹具来编写测试单元。</p><div class="language-c++" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-c++"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">QueueTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> IsEmptyInitially</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">q0_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">QueueTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DequeueWorks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  int*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> q0_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Dequeue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> nullptr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  n </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> q1_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Dequeue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ASSERT_NE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> nullptr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">q1_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  delete</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  n </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> q2_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Dequeue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ASSERT_NE</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> nullptr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">q2_</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  delete</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> n</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p>上述代码同时使用了 <code>ASSERT_*</code> 和 <code>EXPECT_*</code> 断言。 根据我们的经验法则，当你希望在断言失败后继续测试以揭示更多错误时，使用 <code>EXPECT_*</code>，而当失败后继续运行没有意义时，使用 <code>ASSERT_*</code>。 例如，<code>Dequeue</code> 测试中的第二个断言是 <code>ASSERT_NE(n, nullptr)</code>，因为我们稍后需要解引用指针 <code>n</code>，当 <code>n</code> 为 <code>nullptr</code> 时会导致段错误。</p><p>当这些测试单元运行时，会发生以下情况：</p><div class="vp-steps"><ol><li>GoogleTest 构造一个 <code>QueueTest</code> 对象（我们称之为 <code>t1</code>）。</li><li>第一个测试单元（<code>IsEmptyInitially</code>）在 <code>t1</code> 上运行。</li><li><code>t1</code> 被析构。</li><li>上述步骤在另一个 <code>QueueTest</code> 对象上重复，这次运行 <code>DequeueWorks</code> 测试单元。</li></ol></div><h2 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试"><span>运行测试</span></a></h2><p><code>TEST()</code> 和 <code>TEST_F()</code> 隐式地将测试单元注册到 GoogleTest 中。 因此，与许多其他 C++ 测试框架不同，你不必为了运行它们而重新列出所有定义好的测试单元。</p><p>定义完测试单元后，你可以用 <code>RUN_ALL_TESTS()</code> 来运行它们。 如果所有测试单元都成功，则返回 <code>0</code>，否则返回 <code>1</code>。 请注意，<code>RUN_ALL_TESTS()</code> 将运行<strong>所有测试单元</strong>——它们可以来自不同的测试套件，甚至不同的源文件。</p><p>当被调用时，<code>RUN_ALL_TESTS()</code> 宏将：</p><div class="vp-steps"><ul><li><p>保存所有 GoogleTest 标志的状态。</p></li><li><p>为第一个测试单元创建测试测试夹具对象。</p></li><li><p>通过 <code>SetUp()</code> 初始化它。</p></li><li><p>在夹具对象上运行测试单元。</p></li><li><p>通过 <code>TearDown()</code> 清理资源。</p></li><li><p>删除夹具。</p></li><li><p>恢复所有 GoogleTest 标志的状态。</p></li><li><p>为下一个测试单元重复上述步骤，直到所有测试单元都运行完毕。</p></li></ul></div><p>在这个过程中，如果发生致命失败，后续步骤将被跳过。</p>`,16)),a("div",y,[s[52]||(s[52]=a("p",{class:"hint-container-title"},"警告",-1)),s[53]||(s[53]=a("p",null,[i("你"),a("strong",null,"不能"),i("忽略 "),a("code",null,"RUN_ALL_TESTS()"),i(" 的返回值，否则会产生编译错误。 这样设计的理由是，自动化测试服务根据其退出代码而不是 stdout/stderr 输出来判断测试是否通过，因此你的 "),a("code",null,"main()"),i(" 函数必须返回 "),a("code",null,"RUN_ALL_TESTS()"),i(" 的值。")],-1)),a("p",null,[s[46]||(s[46]=i("此外，你应该只调用 ",-1)),s[47]||(s[47]=a("code",null,"RUN_ALL_TESTS()",-1)),s[48]||(s[48]=i()),s[49]||(s[49]=a("strong",null,"一次",-1)),s[50]||(s[50]=i("。 多次调用会与一些 GoogleTest 高级功能（例如，线程安全的",-1)),t(e,{href:"advanced.md#death-tests"},{default:l(()=>s[45]||(s[45]=[i("死亡测试",-1)])),_:1,__:[45]}),s[51]||(s[51]=i("）冲突，因此不受支持。",-1))])]),s[68]||(s[68]=n(`<h2 id="编写-main-函数" tabindex="-1"><a class="header-anchor" href="#编写-main-函数"><span>编写 main() 函数</span></a></h2><p>大多数用户<strong>不需要</strong>编写自己的 <code>main</code> 函数，只需链接 <code>gtest_main</code>（注意不是 <code>gtest</code>），它定义了一个合适的程序入口点。 请参阅本节末尾以获得更多详细信息。 本节的其余部分仅适用于你需要在测试运行之前执行某些自定义操作，而这些操作无法在测试夹具和测试套件的框架内进行。</p><p>如果你想编写自己的 <code>main</code> 函数，它应该返回 <code>RUN_ALL_TESTS()</code> 的值。</p><p>你可以从下面这个样板开始：</p><div class="language-cpp" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-cpp"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">this/package/foo.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">gtest/gtest.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> my</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> project</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">namespace</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 用于测试类 Foo 的夹具。</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> protected</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 如果以下任意函数的函数体为空，你可以删除它。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 你可以在这里为每个测试执行设置工作。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  ~FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 你可以在这里执行不会抛出异常的清理工作。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 如果构造函数和析构函数不足以设置和清理每个测试，你可以定义以下方法：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> SetUp</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 这里的代码将在构造函数之后被立即调用（在每个测试单元运行之前）。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TearDown</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> override</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     // 这里的代码将在每个测试单元结束之后立即调用（在析构函数之前）。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 这里声明的类成员可以被 Foo 测试套件中的所有测试单元使用。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 测试 Foo::Bar() 方法是否执行 Abc。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MethodBarDoesAbc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string input_filepath </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">this/package/testdata/myinputfile.dat</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string output_filepath </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">this/package/testdata/myoutputfile.dat</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  Foo f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  EXPECT_EQ</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Bar</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">input_filepath</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> output_filepath</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 测试 Foo 是否执行 Xyz。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">TEST_F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FooTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> DoesXyz</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 执行 Foo 的 Xyz 功能。</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace project</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // namespace my</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> char</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> **</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  testing</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">InitGoogleTest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">argc</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> argv</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RUN_ALL_TESTS</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div>`,5)),a("p",null,[s[55]||(s[55]=a("code",null,"testing::InitGoogleTest()",-1)),s[56]||(s[56]=i(" 函数解析命令行以获取 GoogleTest 标志，并删除所有识别到的标志。 这允许用户通过各种标志来控制测试程序的行为，我们将在",-1)),t(e,{href:"advanced.md"},{default:l(()=>s[54]||(s[54]=[i("进阶指南",-1)])),_:1,__:[54]}),s[57]||(s[57]=i("中介绍这些标志。 你",-1)),s[58]||(s[58]=a("strong",null,"必须",-1)),s[59]||(s[59]=i("在调用 ",-1)),s[60]||(s[60]=a("code",null,"RUN_ALL_TESTS()",-1)),s[61]||(s[61]=i(" 之前调用此函数，否则这些标志将无法被正确初始化。",-1))]),s[69]||(s[69]=n('<p>在 Windows 上，<code>InitGoogleTest()</code> 也适用于宽字符串，因此它可以在 <code>UNICODE</code> 模式下编译的程序中使用。</p><p>但也许你认为编写这些 <code>main</code> 函数太麻烦了？ 我们完全同意你的观点，这就是为什么 Google Test 提供了一个 <code>main()</code> 的基本实现。 如果它符合你的需求，那么只需将你的测试与 <code>gtest_main</code> 库链接即可。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>ParseGUnitFlags()</code> 已弃用，推荐使用 <code>InitGoogleTest()</code>。</p></div><h2 id="已知限制" tabindex="-1"><a class="header-anchor" href="#已知限制"><span>已知限制</span></a></h2><ul><li>GoogleTest 被设计为线程安全的。 在 <code>pthreads</code> 库可用的系统上，其实现是线程安全的。 在其他系统（例如 Windows）上，目前从两个线程并发使用 GoogleTest 断言是<strong>不安全</strong>的。 在大多数测试中，这不是问题，因为断言通常在主线程中完成。 如果你想为此提供帮助，可以自愿在 <code>gtest-port.h</code> 中为你的平台实现必要的同步原语。</li></ul>',5))])}const E=k(g,[["render",A]]),u=JSON.parse('{"path":"/gtest/primer/","title":"初学者指南","lang":"zh-CN","frontmatter":{"title":"初学者指南","createTime":"2025/03/05 10:53:30","permalink":"/gtest/primer/","copyright":{"creation":"translate","source":"https://google.github.io/googletest/primer.html"},"description":"引言：为什么选择 GoogleTest？ GoogleTest 可以帮助你编写更好的 C++ 测试。 GoogleTest 是由 Google 的测试技术团队在考虑了 Google 的特定需求和约束后开发的测试框架。 无论你是在 Linux、Windows 还是 Mac 上工作，只要你在编写 C++ 代码，GoogleTest 都能帮助你。 它支持任何...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初学者指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-10T08:59:20.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://sunirein.tech/gtest/primer/"}],["meta",{"property":"og:site_name","content":"SuniRein 的个人小站"}],["meta",{"property":"og:title","content":"初学者指南"}],["meta",{"property":"og:description","content":"引言：为什么选择 GoogleTest？ GoogleTest 可以帮助你编写更好的 C++ 测试。 GoogleTest 是由 Google 的测试技术团队在考虑了 Google 的特定需求和约束后开发的测试框架。 无论你是在 Linux、Windows 还是 Mac 上工作，只要你在编写 C++ 代码，GoogleTest 都能帮助你。 它支持任何..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-10T08:59:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-10T08:59:20.000Z"}]]},"readingTime":{"minutes":15.71,"words":4714},"git":{"createdTime":1741159892000,"updatedTime":1754816360000,"contributors":[{"name":"SuniRein","username":"SuniRein","email":"sunirein@qq.com","commits":6,"avatar":"https://avatars.githubusercontent.com/SuniRein?v=4","url":"https://github.com/SuniRein"}]},"autoDesc":true,"filePathRelative":"notes/GoogleTest/primer.md","headers":[]}');export{E as comp,u as data};
